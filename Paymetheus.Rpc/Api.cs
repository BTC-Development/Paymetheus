// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Walletrpc {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Api {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Api() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglhcGkucHJvdG8SCXdhbGxldHJwYyLcAgoSVHJhbnNhY3Rpb25EZXRhaWxz", 
            "EgwKBGhhc2gYASABKAwSEwoLdHJhbnNhY3Rpb24YAiABKAwSMwoGZGViaXRz", 
            "GAMgAygLMiMud2FsbGV0cnBjLlRyYW5zYWN0aW9uRGV0YWlscy5JbnB1dBI1", 
            "CgdvdXRwdXRzGAQgAygLMiQud2FsbGV0cnBjLlRyYW5zYWN0aW9uRGV0YWls", 
            "cy5PdXRwdXQSCwoDZmVlGAUgASgDEhEKCXRpbWVzdGFtcBgGIAEoAxpJCgVJ", 
            "bnB1dBINCgVpbmRleBgBIAEoDRIYChBwcmV2aW91c19hY2NvdW50GAIgASgN", 
            "EhcKD3ByZXZpb3VzX2Ftb3VudBgDIAEoAxpMCgZPdXRwdXQSDAoEbWluZRgD", 
            "IAEoCBIPCgdhY2NvdW50GAQgASgNEhAKCGludGVybmFsGAUgASgIEhEKCWFk", 
            "ZHJlc3NlcxgGIAMoCSJ0CgxCbG9ja0RldGFpbHMSDAoEaGFzaBgBIAEoDBIO", 
            "CgZoZWlnaHQYAiABKAUSEQoJdGltZXN0YW1wGAMgASgDEjMKDHRyYW5zYWN0", 
            "aW9ucxgEIAMoCzIdLndhbGxldHJwYy5UcmFuc2FjdGlvbkRldGFpbHMiOAoO", 
            "QWNjb3VudEJhbGFuY2USDwoHYWNjb3VudBgBIAEoDRIVCg10b3RhbF9iYWxh", 
            "bmNlGAIgASgDIg0KC1BpbmdSZXF1ZXN0Ig4KDFBpbmdSZXNwb25zZSIQCg5O", 
            "ZXR3b3JrUmVxdWVzdCIpCg9OZXR3b3JrUmVzcG9uc2USFgoOYWN0aXZlX25l", 
            "dHdvcmsYASABKA0iLAoUQWNjb3VudE51bWJlclJlcXVlc3QSFAoMYWNjb3Vu", 
            "dF9uYW1lGAEgASgJIi8KFUFjY291bnROdW1iZXJSZXNwb25zZRIWCg5hY2Nv", 
            "dW50X251bWJlchgBIAEoDSIRCg9BY2NvdW50c1JlcXVlc3QiqAIKEEFjY291", 
            "bnRzUmVzcG9uc2USNQoIYWNjb3VudHMYASADKAsyIy53YWxsZXRycGMuQWNj", 
            "b3VudHNSZXNwb25zZS5BY2NvdW50EhoKEmN1cnJlbnRfYmxvY2tfaGFzaBgC", 
            "IAEoDBIcChRjdXJyZW50X2Jsb2NrX2hlaWdodBgDIAEoBRqiAQoHQWNjb3Vu", 
            "dBIWCg5hY2NvdW50X251bWJlchgBIAEoDRIUCgxhY2NvdW50X25hbWUYAiAB", 
            "KAkSFQoNdG90YWxfYmFsYW5jZRgDIAEoAxIaChJleHRlcm5hbF9rZXlfY291", 
            "bnQYBCABKA0SGgoSaW50ZXJuYWxfa2V5X2NvdW50GAUgASgNEhoKEmltcG9y", 
            "dGVkX2tleV9jb3VudBgGIAEoDSJAChRSZW5hbWVBY2NvdW50UmVxdWVzdBIW", 
            "Cg5hY2NvdW50X251bWJlchgBIAEoDRIQCghuZXdfbmFtZRgCIAEoCSIXChVS", 
            "ZW5hbWVBY2NvdW50UmVzcG9uc2UiPgoSTmV4dEFjY291bnRSZXF1ZXN0EhIK", 
            "CnBhc3NwaHJhc2UYASABKAwSFAoMYWNjb3VudF9uYW1lGAIgASgJIi0KE05l", 
            "eHRBY2NvdW50UmVzcG9uc2USFgoOYWNjb3VudF9udW1iZXIYASABKA0iJQoS", 
            "TmV4dEFkZHJlc3NSZXF1ZXN0Eg8KB2FjY291bnQYASABKA0iJgoTTmV4dEFk", 
            "ZHJlc3NSZXNwb25zZRIPCgdhZGRyZXNzGAEgASgJImcKF0ltcG9ydFByaXZh", 
            "dGVLZXlSZXF1ZXN0EhIKCnBhc3NwaHJhc2UYASABKAwSDwoHYWNjb3VudBgC", 
            "IAEoDRIXCg9wcml2YXRlX2tleV93aWYYAyABKAkSDgoGcmVzY2FuGAQgASgI", 
            "IhoKGEltcG9ydFByaXZhdGVLZXlSZXNwb25zZSJICg5CYWxhbmNlUmVxdWVz", 
            "dBIWCg5hY2NvdW50X251bWJlchgBIAEoDRIeChZyZXF1aXJlZF9jb25maXJt", 
            "YXRpb25zGAIgASgFIkwKD0JhbGFuY2VSZXNwb25zZRINCgV0b3RhbBgBIAEo", 
            "AxIRCglzcGVuZGFibGUYAiABKAMSFwoPaW1tYXR1cmVfcmV3YXJkGAMgASgD", 
            "IrEBChZHZXRUcmFuc2FjdGlvbnNSZXF1ZXN0EhsKE3N0YXJ0aW5nX2Jsb2Nr", 
            "X2hhc2gYASABKAwSHQoVc3RhcnRpbmdfYmxvY2tfaGVpZ2h0GAIgASgREhkK", 
            "EWVuZGluZ19ibG9ja19oYXNoGAMgASgMEhsKE2VuZGluZ19ibG9ja19oZWln", 
            "aHQYBCABKAUSIwobbWluaW11bV9yZWNlbnRfdHJhbnNhY3Rpb25zGAUgASgF", 
            "IosBChdHZXRUcmFuc2FjdGlvbnNSZXNwb25zZRIzChJtaW5lZF90cmFuc2Fj", 
            "dGlvbnMYASADKAsyFy53YWxsZXRycGMuQmxvY2tEZXRhaWxzEjsKFHVubWlu", 
            "ZWRfdHJhbnNhY3Rpb25zGAIgAygLMh0ud2FsbGV0cnBjLlRyYW5zYWN0aW9u", 
            "RGV0YWlscyKeAQoXQ2hhbmdlUGFzc3BocmFzZVJlcXVlc3QSMwoDa2V5GAEg", 
            "ASgOMiYud2FsbGV0cnBjLkNoYW5nZVBhc3NwaHJhc2VSZXF1ZXN0LktleRIW", 
            "Cg5vbGRfcGFzc3BocmFzZRgCIAEoDBIWCg5uZXdfcGFzc3BocmFzZRgDIAEo", 
            "DCIeCgNLZXkSCwoHUFJJVkFURRAAEgoKBlBVQkxJQxABIhoKGENoYW5nZVBh", 
            "c3NwaHJhc2VSZXNwb25zZSKjAQoWRnVuZFRyYW5zYWN0aW9uUmVxdWVzdBIP", 
            "CgdhY2NvdW50GAEgASgNEhUKDXRhcmdldF9hbW91bnQYAiABKAMSHgoWcmVx", 
            "dWlyZWRfY29uZmlybWF0aW9ucxgDIAEoBRIiChppbmNsdWRlX2ltbWF0dXJl", 
            "X2NvaW5iYXNlcxgEIAEoCBIdChVpbmNsdWRlX2NoYW5nZV9zY3JpcHQYBSAB", 
            "KAgiqQIKF0Z1bmRUcmFuc2FjdGlvblJlc3BvbnNlEksKEHNlbGVjdGVkX291", 
            "dHB1dHMYASADKAsyMS53YWxsZXRycGMuRnVuZFRyYW5zYWN0aW9uUmVzcG9u", 
            "c2UuUHJldmlvdXNPdXRwdXQSFAoMdG90YWxfYW1vdW50GAIgASgDEhgKEGNo", 
            "YW5nZV9wa19zY3JpcHQYAyABKAwakAEKDlByZXZpb3VzT3V0cHV0EhgKEHRy", 
            "YW5zYWN0aW9uX2hhc2gYASABKAwSFAoMb3V0cHV0X2luZGV4GAIgASgNEg4K", 
            "BmFtb3VudBgDIAEoAxIRCglwa19zY3JpcHQYBCABKAwSFAoMcmVjZWl2ZV90", 
            "aW1lGAUgASgDEhUKDWZyb21fY29pbmJhc2UYBiABKAgiYwoWU2lnblRyYW5z", 
            "YWN0aW9uUmVxdWVzdBISCgpwYXNzcGhyYXNlGAEgASgMEh4KFnNlcmlhbGl6", 
            "ZWRfdHJhbnNhY3Rpb24YAiABKAwSFQoNaW5wdXRfaW5kZXhlcxgDIAMoDSJO", 
            "ChdTaWduVHJhbnNhY3Rpb25SZXNwb25zZRITCgt0cmFuc2FjdGlvbhgBIAEo", 
            "DBIeChZ1bnNpZ25lZF9pbnB1dF9pbmRleGVzGAIgAygNIjcKGVB1Ymxpc2hU", 
            "cmFuc2FjdGlvblJlcXVlc3QSGgoSc2lnbmVkX3RyYW5zYWN0aW9uGAEgASgM", 
            "IhwKGlB1Ymxpc2hUcmFuc2FjdGlvblJlc3BvbnNlIiEKH1RyYW5zYWN0aW9u", 
            "Tm90aWZpY2F0aW9uc1JlcXVlc3QizgEKIFRyYW5zYWN0aW9uTm90aWZpY2F0", 
            "aW9uc1Jlc3BvbnNlEjAKD2F0dGFjaGVkX2Jsb2NrcxgBIAMoCzIXLndhbGxl", 
            "dHJwYy5CbG9ja0RldGFpbHMSFwoPZGV0YWNoZWRfYmxvY2tzGAIgAygMEjsK", 
            "FHVubWluZWRfdHJhbnNhY3Rpb25zGAMgAygLMh0ud2FsbGV0cnBjLlRyYW5z", 
            "YWN0aW9uRGV0YWlscxIiChp1bm1pbmVkX3RyYW5zYWN0aW9uX2hhc2hlcxgE", 
            "IAMoDCJkCh1TcGVudG5lc3NOb3RpZmljYXRpb25zUmVxdWVzdBIPCgdhY2Nv", 
            "dW50GAEgASgNEhkKEW5vX25vdGlmeV91bnNwZW50GAIgASgIEhcKD25vX25v", 
            "dGlmeV9zcGVudBgDIAEoCCLOAQoeU3BlbnRuZXNzTm90aWZpY2F0aW9uc1Jl", 
            "c3BvbnNlEhgKEHRyYW5zYWN0aW9uX2hhc2gYASABKAwSFAoMb3V0cHV0X2lu", 
            "ZGV4GAIgASgNEkIKB3NwZW5kZXIYAyABKAsyMS53YWxsZXRycGMuU3BlbnRu", 
            "ZXNzTm90aWZpY2F0aW9uc1Jlc3BvbnNlLlNwZW5kZXIaOAoHU3BlbmRlchIY", 
            "ChB0cmFuc2FjdGlvbl9oYXNoGAEgASgMEhMKC2lucHV0X2luZGV4GAIgASgN", 
            "Ih0KG0FjY291bnROb3RpZmljYXRpb25zUmVxdWVzdCKgAQocQWNjb3VudE5v", 
            "dGlmaWNhdGlvbnNSZXNwb25zZRIWCg5hY2NvdW50X251bWJlchgBIAEoDRIU", 
            "CgxhY2NvdW50X25hbWUYAiABKAkSGgoSZXh0ZXJuYWxfa2V5X2NvdW50GAMg", 
            "ASgNEhoKEmludGVybmFsX2tleV9jb3VudBgEIAEoDRIaChJpbXBvcnRlZF9r", 
            "ZXlfY291bnQYBSABKA0iWgoTQ3JlYXRlV2FsbGV0UmVxdWVzdBIZChFwdWJs", 
            "aWNfcGFzc3BocmFzZRgBIAEoDBIaChJwcml2YXRlX3Bhc3NwaHJhc2UYAiAB", 
            "KAwSDAoEc2VlZBgDIAEoDCIWChRDcmVhdGVXYWxsZXRSZXNwb25zZSIuChFP", 
            "cGVuV2FsbGV0UmVxdWVzdBIZChFwdWJsaWNfcGFzc3BocmFzZRgBIAEoDCIU", 
            "ChJPcGVuV2FsbGV0UmVzcG9uc2UiFAoSQ2xvc2VXYWxsZXRSZXF1ZXN0IhUK", 
            "E0Nsb3NlV2FsbGV0UmVzcG9uc2UiFQoTV2FsbGV0RXhpc3RzUmVxdWVzdCIm", 
            "ChRXYWxsZXRFeGlzdHNSZXNwb25zZRIOCgZleGlzdHMYASABKAgiZwoTU3Rh", 
            "cnRCdGNkUnBjUmVxdWVzdBIXCg9uZXR3b3JrX2FkZHJlc3MYASABKAkSEAoI", 
            "dXNlcm5hbWUYAiABKAkSEAoIcGFzc3dvcmQYAyABKAwSEwoLY2VydGlmaWNh", 
            "dGUYBCABKAwiFgoUU3RhcnRCdGNkUnBjUmVzcG9uc2Uy0wsKDVdhbGxldFNl", 
            "cnZpY2USNwoEUGluZxIWLndhbGxldHJwYy5QaW5nUmVxdWVzdBoXLndhbGxl", 
            "dHJwYy5QaW5nUmVzcG9uc2USQAoHTmV0d29yaxIZLndhbGxldHJwYy5OZXR3", 
            "b3JrUmVxdWVzdBoaLndhbGxldHJwYy5OZXR3b3JrUmVzcG9uc2USUgoNQWNj", 
            "b3VudE51bWJlchIfLndhbGxldHJwYy5BY2NvdW50TnVtYmVyUmVxdWVzdBog", 
            "LndhbGxldHJwYy5BY2NvdW50TnVtYmVyUmVzcG9uc2USQwoIQWNjb3VudHMS", 
            "Gi53YWxsZXRycGMuQWNjb3VudHNSZXF1ZXN0Ghsud2FsbGV0cnBjLkFjY291", 
            "bnRzUmVzcG9uc2USQAoHQmFsYW5jZRIZLndhbGxldHJwYy5CYWxhbmNlUmVx", 
            "dWVzdBoaLndhbGxldHJwYy5CYWxhbmNlUmVzcG9uc2USWAoPR2V0VHJhbnNh", 
            "Y3Rpb25zEiEud2FsbGV0cnBjLkdldFRyYW5zYWN0aW9uc1JlcXVlc3QaIi53", 
            "YWxsZXRycGMuR2V0VHJhbnNhY3Rpb25zUmVzcG9uc2USdQoYVHJhbnNhY3Rp", 
            "b25Ob3RpZmljYXRpb25zEioud2FsbGV0cnBjLlRyYW5zYWN0aW9uTm90aWZp", 
            "Y2F0aW9uc1JlcXVlc3QaKy53YWxsZXRycGMuVHJhbnNhY3Rpb25Ob3RpZmlj", 
            "YXRpb25zUmVzcG9uc2UwARJvChZTcGVudG5lc3NOb3RpZmljYXRpb25zEigu", 
            "d2FsbGV0cnBjLlNwZW50bmVzc05vdGlmaWNhdGlvbnNSZXF1ZXN0Gikud2Fs", 
            "bGV0cnBjLlNwZW50bmVzc05vdGlmaWNhdGlvbnNSZXNwb25zZTABEmkKFEFj", 
            "Y291bnROb3RpZmljYXRpb25zEiYud2FsbGV0cnBjLkFjY291bnROb3RpZmlj", 
            "YXRpb25zUmVxdWVzdBonLndhbGxldHJwYy5BY2NvdW50Tm90aWZpY2F0aW9u", 
            "c1Jlc3BvbnNlMAESWwoQQ2hhbmdlUGFzc3BocmFzZRIiLndhbGxldHJwYy5D", 
            "aGFuZ2VQYXNzcGhyYXNlUmVxdWVzdBojLndhbGxldHJwYy5DaGFuZ2VQYXNz", 
            "cGhyYXNlUmVzcG9uc2USUgoNUmVuYW1lQWNjb3VudBIfLndhbGxldHJwYy5S", 
            "ZW5hbWVBY2NvdW50UmVxdWVzdBogLndhbGxldHJwYy5SZW5hbWVBY2NvdW50", 
            "UmVzcG9uc2USTAoLTmV4dEFjY291bnQSHS53YWxsZXRycGMuTmV4dEFjY291", 
            "bnRSZXF1ZXN0Gh4ud2FsbGV0cnBjLk5leHRBY2NvdW50UmVzcG9uc2USTAoL", 
            "TmV4dEFkZHJlc3MSHS53YWxsZXRycGMuTmV4dEFkZHJlc3NSZXF1ZXN0Gh4u", 
            "d2FsbGV0cnBjLk5leHRBZGRyZXNzUmVzcG9uc2USWwoQSW1wb3J0UHJpdmF0", 
            "ZUtleRIiLndhbGxldHJwYy5JbXBvcnRQcml2YXRlS2V5UmVxdWVzdBojLndh", 
            "bGxldHJwYy5JbXBvcnRQcml2YXRlS2V5UmVzcG9uc2USWAoPRnVuZFRyYW5z", 
            "YWN0aW9uEiEud2FsbGV0cnBjLkZ1bmRUcmFuc2FjdGlvblJlcXVlc3QaIi53", 
            "YWxsZXRycGMuRnVuZFRyYW5zYWN0aW9uUmVzcG9uc2USWAoPU2lnblRyYW5z", 
            "YWN0aW9uEiEud2FsbGV0cnBjLlNpZ25UcmFuc2FjdGlvblJlcXVlc3QaIi53", 
            "YWxsZXRycGMuU2lnblRyYW5zYWN0aW9uUmVzcG9uc2USYQoSUHVibGlzaFRy", 
            "YW5zYWN0aW9uEiQud2FsbGV0cnBjLlB1Ymxpc2hUcmFuc2FjdGlvblJlcXVl", 
            "c3QaJS53YWxsZXRycGMuUHVibGlzaFRyYW5zYWN0aW9uUmVzcG9uc2UyoQMK", 
            "E1dhbGxldExvYWRlclNlcnZpY2USTwoMV2FsbGV0RXhpc3RzEh4ud2FsbGV0", 
            "cnBjLldhbGxldEV4aXN0c1JlcXVlc3QaHy53YWxsZXRycGMuV2FsbGV0RXhp", 
            "c3RzUmVzcG9uc2USTwoMQ3JlYXRlV2FsbGV0Eh4ud2FsbGV0cnBjLkNyZWF0", 
            "ZVdhbGxldFJlcXVlc3QaHy53YWxsZXRycGMuQ3JlYXRlV2FsbGV0UmVzcG9u", 
            "c2USSQoKT3BlbldhbGxldBIcLndhbGxldHJwYy5PcGVuV2FsbGV0UmVxdWVz", 
            "dBodLndhbGxldHJwYy5PcGVuV2FsbGV0UmVzcG9uc2USTAoLQ2xvc2VXYWxs", 
            "ZXQSHS53YWxsZXRycGMuQ2xvc2VXYWxsZXRSZXF1ZXN0Gh4ud2FsbGV0cnBj", 
            "LkNsb3NlV2FsbGV0UmVzcG9uc2USTwoMU3RhcnRCdGNkUnBjEh4ud2FsbGV0", 
            "cnBjLlN0YXJ0QnRjZFJwY1JlcXVlc3QaHy53YWxsZXRycGMuU3RhcnRCdGNk", 
            "UnBjUmVzcG9uc2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.TransactionDetails), new[]{ "Hash", "Transaction", "Debits", "Outputs", "Fee", "Timestamp" }, null, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.TransactionDetails.Types.Input), new[]{ "Index", "PreviousAccount", "PreviousAmount" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.TransactionDetails.Types.Output), new[]{ "Mine", "Account", "Internal", "Addresses" }, null, null, null)}),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.BlockDetails), new[]{ "Hash", "Height", "Timestamp", "Transactions" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.AccountBalance), new[]{ "Account", "TotalBalance" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.PingRequest), null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.PingResponse), null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.NetworkRequest), null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.NetworkResponse), new[]{ "ActiveNetwork" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.AccountNumberRequest), new[]{ "AccountName" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.AccountNumberResponse), new[]{ "AccountNumber" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.AccountsRequest), null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.AccountsResponse), new[]{ "Accounts", "CurrentBlockHash", "CurrentBlockHeight" }, null, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.AccountsResponse.Types.Account), new[]{ "AccountNumber", "AccountName", "TotalBalance", "ExternalKeyCount", "InternalKeyCount", "ImportedKeyCount" }, null, null, null)}),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.RenameAccountRequest), new[]{ "AccountNumber", "NewName" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.RenameAccountResponse), null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.NextAccountRequest), new[]{ "Passphrase", "AccountName" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.NextAccountResponse), new[]{ "AccountNumber" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.NextAddressRequest), new[]{ "Account" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.NextAddressResponse), new[]{ "Address" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.ImportPrivateKeyRequest), new[]{ "Passphrase", "Account", "PrivateKeyWif", "Rescan" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.ImportPrivateKeyResponse), null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.BalanceRequest), new[]{ "AccountNumber", "RequiredConfirmations" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.BalanceResponse), new[]{ "Total", "Spendable", "ImmatureReward" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.GetTransactionsRequest), new[]{ "StartingBlockHash", "StartingBlockHeight", "EndingBlockHash", "EndingBlockHeight", "MinimumRecentTransactions" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.GetTransactionsResponse), new[]{ "MinedTransactions", "UnminedTransactions" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.ChangePassphraseRequest), new[]{ "Key", "OldPassphrase", "NewPassphrase" }, null, new[]{ typeof(global::Walletrpc.ChangePassphraseRequest.Types.Key) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.ChangePassphraseResponse), null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.FundTransactionRequest), new[]{ "Account", "TargetAmount", "RequiredConfirmations", "IncludeImmatureCoinbases", "IncludeChangeScript" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.FundTransactionResponse), new[]{ "SelectedOutputs", "TotalAmount", "ChangePkScript" }, null, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.FundTransactionResponse.Types.PreviousOutput), new[]{ "TransactionHash", "OutputIndex", "Amount", "PkScript", "ReceiveTime", "FromCoinbase" }, null, null, null)}),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.SignTransactionRequest), new[]{ "Passphrase", "SerializedTransaction", "InputIndexes" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.SignTransactionResponse), new[]{ "Transaction", "UnsignedInputIndexes" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.PublishTransactionRequest), new[]{ "SignedTransaction" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.PublishTransactionResponse), null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.TransactionNotificationsRequest), null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.TransactionNotificationsResponse), new[]{ "AttachedBlocks", "DetachedBlocks", "UnminedTransactions", "UnminedTransactionHashes" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.SpentnessNotificationsRequest), new[]{ "Account", "NoNotifyUnspent", "NoNotifySpent" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.SpentnessNotificationsResponse), new[]{ "TransactionHash", "OutputIndex", "Spender" }, null, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.SpentnessNotificationsResponse.Types.Spender), new[]{ "TransactionHash", "InputIndex" }, null, null, null)}),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.AccountNotificationsRequest), null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.AccountNotificationsResponse), new[]{ "AccountNumber", "AccountName", "ExternalKeyCount", "InternalKeyCount", "ImportedKeyCount" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.CreateWalletRequest), new[]{ "PublicPassphrase", "PrivatePassphrase", "Seed" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.CreateWalletResponse), null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.OpenWalletRequest), new[]{ "PublicPassphrase" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.OpenWalletResponse), null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.CloseWalletRequest), null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.CloseWalletResponse), null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.WalletExistsRequest), null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.WalletExistsResponse), new[]{ "Exists" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.StartBtcdRpcRequest), new[]{ "NetworkAddress", "Username", "Password", "Certificate" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Walletrpc.StartBtcdRpcResponse), null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TransactionDetails : pb::IMessage<TransactionDetails> {
    private static readonly pb::MessageParser<TransactionDetails> _parser = new pb::MessageParser<TransactionDetails>(() => new TransactionDetails());
    public static pb::MessageParser<TransactionDetails> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TransactionDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TransactionDetails(TransactionDetails other) : this() {
      hash_ = other.hash_;
      transaction_ = other.transaction_;
      debits_ = other.debits_.Clone();
      outputs_ = other.outputs_.Clone();
      fee_ = other.fee_;
      timestamp_ = other.timestamp_;
    }

    public TransactionDetails Clone() {
      return new TransactionDetails(this);
    }

    public const int HashFieldNumber = 1;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int TransactionFieldNumber = 2;
    private pb::ByteString transaction_ = pb::ByteString.Empty;
    public pb::ByteString Transaction {
      get { return transaction_; }
      set {
        transaction_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DebitsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Walletrpc.TransactionDetails.Types.Input> _repeated_debits_codec
        = pb::FieldCodec.ForMessage(26, global::Walletrpc.TransactionDetails.Types.Input.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.TransactionDetails.Types.Input> debits_ = new pbc::RepeatedField<global::Walletrpc.TransactionDetails.Types.Input>();
    public pbc::RepeatedField<global::Walletrpc.TransactionDetails.Types.Input> Debits {
      get { return debits_; }
    }

    public const int OutputsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Walletrpc.TransactionDetails.Types.Output> _repeated_outputs_codec
        = pb::FieldCodec.ForMessage(34, global::Walletrpc.TransactionDetails.Types.Output.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.TransactionDetails.Types.Output> outputs_ = new pbc::RepeatedField<global::Walletrpc.TransactionDetails.Types.Output>();
    public pbc::RepeatedField<global::Walletrpc.TransactionDetails.Types.Output> Outputs {
      get { return outputs_; }
    }

    public const int FeeFieldNumber = 5;
    private long fee_;
    public long Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    public const int TimestampFieldNumber = 6;
    private long timestamp_;
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as TransactionDetails);
    }

    public bool Equals(TransactionDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (Transaction != other.Transaction) return false;
      if(!debits_.Equals(other.debits_)) return false;
      if(!outputs_.Equals(other.outputs_)) return false;
      if (Fee != other.Fee) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Transaction.Length != 0) hash ^= Transaction.GetHashCode();
      hash ^= debits_.GetHashCode();
      hash ^= outputs_.GetHashCode();
      if (Fee != 0L) hash ^= Fee.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Hash);
      }
      if (Transaction.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Transaction);
      }
      debits_.WriteTo(output, _repeated_debits_codec);
      outputs_.WriteTo(output, _repeated_outputs_codec);
      if (Fee != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Fee);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Timestamp);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (Transaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Transaction);
      }
      size += debits_.CalculateSize(_repeated_debits_codec);
      size += outputs_.CalculateSize(_repeated_outputs_codec);
      if (Fee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fee);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      return size;
    }

    public void MergeFrom(TransactionDetails other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Transaction.Length != 0) {
        Transaction = other.Transaction;
      }
      debits_.Add(other.debits_);
      outputs_.Add(other.outputs_);
      if (other.Fee != 0L) {
        Fee = other.Fee;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Hash = input.ReadBytes();
            break;
          }
          case 18: {
            Transaction = input.ReadBytes();
            break;
          }
          case 26: {
            debits_.AddEntriesFrom(input, _repeated_debits_codec);
            break;
          }
          case 34: {
            outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
            break;
          }
          case 40: {
            Fee = input.ReadInt64();
            break;
          }
          case 48: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Input : pb::IMessage<Input> {
        private static readonly pb::MessageParser<Input> _parser = new pb::MessageParser<Input>(() => new Input());
        public static pb::MessageParser<Input> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Walletrpc.TransactionDetails.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public Input() {
          OnConstruction();
        }

        partial void OnConstruction();

        public Input(Input other) : this() {
          index_ = other.index_;
          previousAccount_ = other.previousAccount_;
          previousAmount_ = other.previousAmount_;
        }

        public Input Clone() {
          return new Input(this);
        }

        public const int IndexFieldNumber = 1;
        private uint index_;
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        public const int PreviousAccountFieldNumber = 2;
        private uint previousAccount_;
        public uint PreviousAccount {
          get { return previousAccount_; }
          set {
            previousAccount_ = value;
          }
        }

        public const int PreviousAmountFieldNumber = 3;
        private long previousAmount_;
        public long PreviousAmount {
          get { return previousAmount_; }
          set {
            previousAmount_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as Input);
        }

        public bool Equals(Input other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          if (PreviousAccount != other.PreviousAccount) return false;
          if (PreviousAmount != other.PreviousAmount) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          if (PreviousAccount != 0) hash ^= PreviousAccount.GetHashCode();
          if (PreviousAmount != 0L) hash ^= PreviousAmount.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (PreviousAccount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(PreviousAccount);
          }
          if (PreviousAmount != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(PreviousAmount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (PreviousAccount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PreviousAccount);
          }
          if (PreviousAmount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreviousAmount);
          }
          return size;
        }

        public void MergeFrom(Input other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.PreviousAccount != 0) {
            PreviousAccount = other.PreviousAccount;
          }
          if (other.PreviousAmount != 0L) {
            PreviousAmount = other.PreviousAmount;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 16: {
                PreviousAccount = input.ReadUInt32();
                break;
              }
              case 24: {
                PreviousAmount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Output : pb::IMessage<Output> {
        private static readonly pb::MessageParser<Output> _parser = new pb::MessageParser<Output>(() => new Output());
        public static pb::MessageParser<Output> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Walletrpc.TransactionDetails.Descriptor.NestedTypes[1]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public Output() {
          OnConstruction();
        }

        partial void OnConstruction();

        public Output(Output other) : this() {
          mine_ = other.mine_;
          account_ = other.account_;
          internal_ = other.internal_;
          addresses_ = other.addresses_.Clone();
        }

        public Output Clone() {
          return new Output(this);
        }

        public const int MineFieldNumber = 3;
        private bool mine_;
        public bool Mine {
          get { return mine_; }
          set {
            mine_ = value;
          }
        }

        public const int AccountFieldNumber = 4;
        private uint account_;
        public uint Account {
          get { return account_; }
          set {
            account_ = value;
          }
        }

        public const int InternalFieldNumber = 5;
        private bool internal_;
        public bool Internal {
          get { return internal_; }
          set {
            internal_ = value;
          }
        }

        public const int AddressesFieldNumber = 6;
        private static readonly pb::FieldCodec<string> _repeated_addresses_codec
            = pb::FieldCodec.ForString(50);
        private readonly pbc::RepeatedField<string> addresses_ = new pbc::RepeatedField<string>();
        public pbc::RepeatedField<string> Addresses {
          get { return addresses_; }
        }

        public override bool Equals(object other) {
          return Equals(other as Output);
        }

        public bool Equals(Output other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Mine != other.Mine) return false;
          if (Account != other.Account) return false;
          if (Internal != other.Internal) return false;
          if(!addresses_.Equals(other.addresses_)) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (Mine != false) hash ^= Mine.GetHashCode();
          if (Account != 0) hash ^= Account.GetHashCode();
          if (Internal != false) hash ^= Internal.GetHashCode();
          hash ^= addresses_.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Mine != false) {
            output.WriteRawTag(24);
            output.WriteBool(Mine);
          }
          if (Account != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Account);
          }
          if (Internal != false) {
            output.WriteRawTag(40);
            output.WriteBool(Internal);
          }
          addresses_.WriteTo(output, _repeated_addresses_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (Mine != false) {
            size += 1 + 1;
          }
          if (Account != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
          }
          if (Internal != false) {
            size += 1 + 1;
          }
          size += addresses_.CalculateSize(_repeated_addresses_codec);
          return size;
        }

        public void MergeFrom(Output other) {
          if (other == null) {
            return;
          }
          if (other.Mine != false) {
            Mine = other.Mine;
          }
          if (other.Account != 0) {
            Account = other.Account;
          }
          if (other.Internal != false) {
            Internal = other.Internal;
          }
          addresses_.Add(other.addresses_);
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 24: {
                Mine = input.ReadBool();
                break;
              }
              case 32: {
                Account = input.ReadUInt32();
                break;
              }
              case 40: {
                Internal = input.ReadBool();
                break;
              }
              case 50: {
                addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BlockDetails : pb::IMessage<BlockDetails> {
    private static readonly pb::MessageParser<BlockDetails> _parser = new pb::MessageParser<BlockDetails>(() => new BlockDetails());
    public static pb::MessageParser<BlockDetails> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BlockDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BlockDetails(BlockDetails other) : this() {
      hash_ = other.hash_;
      height_ = other.height_;
      timestamp_ = other.timestamp_;
      transactions_ = other.transactions_.Clone();
    }

    public BlockDetails Clone() {
      return new BlockDetails(this);
    }

    public const int HashFieldNumber = 1;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int HeightFieldNumber = 2;
    private int height_;
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    public const int TransactionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Walletrpc.TransactionDetails> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(34, global::Walletrpc.TransactionDetails.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.TransactionDetails> transactions_ = new pbc::RepeatedField<global::Walletrpc.TransactionDetails>();
    public pbc::RepeatedField<global::Walletrpc.TransactionDetails> Transactions {
      get { return transactions_; }
    }

    public override bool Equals(object other) {
      return Equals(other as BlockDetails);
    }

    public bool Equals(BlockDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (Height != other.Height) return false;
      if (Timestamp != other.Timestamp) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      hash ^= transactions_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Hash);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      transactions_.WriteTo(output, _repeated_transactions_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      return size;
    }

    public void MergeFrom(BlockDetails other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      transactions_.Add(other.transactions_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Hash = input.ReadBytes();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 34: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AccountBalance : pb::IMessage<AccountBalance> {
    private static readonly pb::MessageParser<AccountBalance> _parser = new pb::MessageParser<AccountBalance>(() => new AccountBalance());
    public static pb::MessageParser<AccountBalance> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AccountBalance() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AccountBalance(AccountBalance other) : this() {
      account_ = other.account_;
      totalBalance_ = other.totalBalance_;
    }

    public AccountBalance Clone() {
      return new AccountBalance(this);
    }

    public const int AccountFieldNumber = 1;
    private uint account_;
    public uint Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    public const int TotalBalanceFieldNumber = 2;
    private long totalBalance_;
    public long TotalBalance {
      get { return totalBalance_; }
      set {
        totalBalance_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AccountBalance);
    }

    public bool Equals(AccountBalance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (TotalBalance != other.TotalBalance) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Account != 0) hash ^= Account.GetHashCode();
      if (TotalBalance != 0L) hash ^= TotalBalance.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Account);
      }
      if (TotalBalance != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalBalance);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
      }
      if (TotalBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBalance);
      }
      return size;
    }

    public void MergeFrom(AccountBalance other) {
      if (other == null) {
        return;
      }
      if (other.Account != 0) {
        Account = other.Account;
      }
      if (other.TotalBalance != 0L) {
        TotalBalance = other.TotalBalance;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadUInt32();
            break;
          }
          case 16: {
            TotalBalance = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PingRequest : pb::IMessage<PingRequest> {
    private static readonly pb::MessageParser<PingRequest> _parser = new pb::MessageParser<PingRequest>(() => new PingRequest());
    public static pb::MessageParser<PingRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PingRequest(PingRequest other) : this() {
    }

    public PingRequest Clone() {
      return new PingRequest(this);
    }

    public override bool Equals(object other) {
      return Equals(other as PingRequest);
    }

    public bool Equals(PingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(PingRequest other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PingResponse : pb::IMessage<PingResponse> {
    private static readonly pb::MessageParser<PingResponse> _parser = new pb::MessageParser<PingResponse>(() => new PingResponse());
    public static pb::MessageParser<PingResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PingResponse(PingResponse other) : this() {
    }

    public PingResponse Clone() {
      return new PingResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as PingResponse);
    }

    public bool Equals(PingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(PingResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetworkRequest : pb::IMessage<NetworkRequest> {
    private static readonly pb::MessageParser<NetworkRequest> _parser = new pb::MessageParser<NetworkRequest>(() => new NetworkRequest());
    public static pb::MessageParser<NetworkRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public NetworkRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public NetworkRequest(NetworkRequest other) : this() {
    }

    public NetworkRequest Clone() {
      return new NetworkRequest(this);
    }

    public override bool Equals(object other) {
      return Equals(other as NetworkRequest);
    }

    public bool Equals(NetworkRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(NetworkRequest other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NetworkResponse : pb::IMessage<NetworkResponse> {
    private static readonly pb::MessageParser<NetworkResponse> _parser = new pb::MessageParser<NetworkResponse>(() => new NetworkResponse());
    public static pb::MessageParser<NetworkResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public NetworkResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public NetworkResponse(NetworkResponse other) : this() {
      activeNetwork_ = other.activeNetwork_;
    }

    public NetworkResponse Clone() {
      return new NetworkResponse(this);
    }

    public const int ActiveNetworkFieldNumber = 1;
    private uint activeNetwork_;
    public uint ActiveNetwork {
      get { return activeNetwork_; }
      set {
        activeNetwork_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as NetworkResponse);
    }

    public bool Equals(NetworkResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActiveNetwork != other.ActiveNetwork) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ActiveNetwork != 0) hash ^= ActiveNetwork.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActiveNetwork != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActiveNetwork);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActiveNetwork != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveNetwork);
      }
      return size;
    }

    public void MergeFrom(NetworkResponse other) {
      if (other == null) {
        return;
      }
      if (other.ActiveNetwork != 0) {
        ActiveNetwork = other.ActiveNetwork;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActiveNetwork = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AccountNumberRequest : pb::IMessage<AccountNumberRequest> {
    private static readonly pb::MessageParser<AccountNumberRequest> _parser = new pb::MessageParser<AccountNumberRequest>(() => new AccountNumberRequest());
    public static pb::MessageParser<AccountNumberRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AccountNumberRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AccountNumberRequest(AccountNumberRequest other) : this() {
      accountName_ = other.accountName_;
    }

    public AccountNumberRequest Clone() {
      return new AccountNumberRequest(this);
    }

    public const int AccountNameFieldNumber = 1;
    private string accountName_ = "";
    public string AccountName {
      get { return accountName_; }
      set {
        accountName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AccountNumberRequest);
    }

    public bool Equals(AccountNumberRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountName != other.AccountName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (AccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
      }
      return size;
    }

    public void MergeFrom(AccountNumberRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountName.Length != 0) {
        AccountName = other.AccountName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AccountNumberResponse : pb::IMessage<AccountNumberResponse> {
    private static readonly pb::MessageParser<AccountNumberResponse> _parser = new pb::MessageParser<AccountNumberResponse>(() => new AccountNumberResponse());
    public static pb::MessageParser<AccountNumberResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AccountNumberResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AccountNumberResponse(AccountNumberResponse other) : this() {
      accountNumber_ = other.accountNumber_;
    }

    public AccountNumberResponse Clone() {
      return new AccountNumberResponse(this);
    }

    public const int AccountNumberFieldNumber = 1;
    private uint accountNumber_;
    public uint AccountNumber {
      get { return accountNumber_; }
      set {
        accountNumber_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AccountNumberResponse);
    }

    public bool Equals(AccountNumberResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountNumber != other.AccountNumber) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (AccountNumber != 0) hash ^= AccountNumber.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountNumber != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountNumber);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (AccountNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountNumber);
      }
      return size;
    }

    public void MergeFrom(AccountNumberResponse other) {
      if (other == null) {
        return;
      }
      if (other.AccountNumber != 0) {
        AccountNumber = other.AccountNumber;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountNumber = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AccountsRequest : pb::IMessage<AccountsRequest> {
    private static readonly pb::MessageParser<AccountsRequest> _parser = new pb::MessageParser<AccountsRequest>(() => new AccountsRequest());
    public static pb::MessageParser<AccountsRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AccountsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AccountsRequest(AccountsRequest other) : this() {
    }

    public AccountsRequest Clone() {
      return new AccountsRequest(this);
    }

    public override bool Equals(object other) {
      return Equals(other as AccountsRequest);
    }

    public bool Equals(AccountsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(AccountsRequest other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AccountsResponse : pb::IMessage<AccountsResponse> {
    private static readonly pb::MessageParser<AccountsResponse> _parser = new pb::MessageParser<AccountsResponse>(() => new AccountsResponse());
    public static pb::MessageParser<AccountsResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AccountsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AccountsResponse(AccountsResponse other) : this() {
      accounts_ = other.accounts_.Clone();
      currentBlockHash_ = other.currentBlockHash_;
      currentBlockHeight_ = other.currentBlockHeight_;
    }

    public AccountsResponse Clone() {
      return new AccountsResponse(this);
    }

    public const int AccountsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Walletrpc.AccountsResponse.Types.Account> _repeated_accounts_codec
        = pb::FieldCodec.ForMessage(10, global::Walletrpc.AccountsResponse.Types.Account.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.AccountsResponse.Types.Account> accounts_ = new pbc::RepeatedField<global::Walletrpc.AccountsResponse.Types.Account>();
    public pbc::RepeatedField<global::Walletrpc.AccountsResponse.Types.Account> Accounts {
      get { return accounts_; }
    }

    public const int CurrentBlockHashFieldNumber = 2;
    private pb::ByteString currentBlockHash_ = pb::ByteString.Empty;
    public pb::ByteString CurrentBlockHash {
      get { return currentBlockHash_; }
      set {
        currentBlockHash_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int CurrentBlockHeightFieldNumber = 3;
    private int currentBlockHeight_;
    public int CurrentBlockHeight {
      get { return currentBlockHeight_; }
      set {
        currentBlockHeight_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AccountsResponse);
    }

    public bool Equals(AccountsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accounts_.Equals(other.accounts_)) return false;
      if (CurrentBlockHash != other.CurrentBlockHash) return false;
      if (CurrentBlockHeight != other.CurrentBlockHeight) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= accounts_.GetHashCode();
      if (CurrentBlockHash.Length != 0) hash ^= CurrentBlockHash.GetHashCode();
      if (CurrentBlockHeight != 0) hash ^= CurrentBlockHeight.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      accounts_.WriteTo(output, _repeated_accounts_codec);
      if (CurrentBlockHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CurrentBlockHash);
      }
      if (CurrentBlockHeight != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentBlockHeight);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += accounts_.CalculateSize(_repeated_accounts_codec);
      if (CurrentBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CurrentBlockHash);
      }
      if (CurrentBlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentBlockHeight);
      }
      return size;
    }

    public void MergeFrom(AccountsResponse other) {
      if (other == null) {
        return;
      }
      accounts_.Add(other.accounts_);
      if (other.CurrentBlockHash.Length != 0) {
        CurrentBlockHash = other.CurrentBlockHash;
      }
      if (other.CurrentBlockHeight != 0) {
        CurrentBlockHeight = other.CurrentBlockHeight;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            accounts_.AddEntriesFrom(input, _repeated_accounts_codec);
            break;
          }
          case 18: {
            CurrentBlockHash = input.ReadBytes();
            break;
          }
          case 24: {
            CurrentBlockHeight = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Account : pb::IMessage<Account> {
        private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
        public static pb::MessageParser<Account> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Walletrpc.AccountsResponse.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public Account() {
          OnConstruction();
        }

        partial void OnConstruction();

        public Account(Account other) : this() {
          accountNumber_ = other.accountNumber_;
          accountName_ = other.accountName_;
          totalBalance_ = other.totalBalance_;
          externalKeyCount_ = other.externalKeyCount_;
          internalKeyCount_ = other.internalKeyCount_;
          importedKeyCount_ = other.importedKeyCount_;
        }

        public Account Clone() {
          return new Account(this);
        }

        public const int AccountNumberFieldNumber = 1;
        private uint accountNumber_;
        public uint AccountNumber {
          get { return accountNumber_; }
          set {
            accountNumber_ = value;
          }
        }

        public const int AccountNameFieldNumber = 2;
        private string accountName_ = "";
        public string AccountName {
          get { return accountName_; }
          set {
            accountName_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public const int TotalBalanceFieldNumber = 3;
        private long totalBalance_;
        public long TotalBalance {
          get { return totalBalance_; }
          set {
            totalBalance_ = value;
          }
        }

        public const int ExternalKeyCountFieldNumber = 4;
        private uint externalKeyCount_;
        public uint ExternalKeyCount {
          get { return externalKeyCount_; }
          set {
            externalKeyCount_ = value;
          }
        }

        public const int InternalKeyCountFieldNumber = 5;
        private uint internalKeyCount_;
        public uint InternalKeyCount {
          get { return internalKeyCount_; }
          set {
            internalKeyCount_ = value;
          }
        }

        public const int ImportedKeyCountFieldNumber = 6;
        private uint importedKeyCount_;
        public uint ImportedKeyCount {
          get { return importedKeyCount_; }
          set {
            importedKeyCount_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as Account);
        }

        public bool Equals(Account other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountNumber != other.AccountNumber) return false;
          if (AccountName != other.AccountName) return false;
          if (TotalBalance != other.TotalBalance) return false;
          if (ExternalKeyCount != other.ExternalKeyCount) return false;
          if (InternalKeyCount != other.InternalKeyCount) return false;
          if (ImportedKeyCount != other.ImportedKeyCount) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (AccountNumber != 0) hash ^= AccountNumber.GetHashCode();
          if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
          if (TotalBalance != 0L) hash ^= TotalBalance.GetHashCode();
          if (ExternalKeyCount != 0) hash ^= ExternalKeyCount.GetHashCode();
          if (InternalKeyCount != 0) hash ^= InternalKeyCount.GetHashCode();
          if (ImportedKeyCount != 0) hash ^= ImportedKeyCount.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (AccountNumber != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountNumber);
          }
          if (AccountName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(AccountName);
          }
          if (TotalBalance != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(TotalBalance);
          }
          if (ExternalKeyCount != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(ExternalKeyCount);
          }
          if (InternalKeyCount != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(InternalKeyCount);
          }
          if (ImportedKeyCount != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(ImportedKeyCount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (AccountNumber != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountNumber);
          }
          if (AccountName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
          }
          if (TotalBalance != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBalance);
          }
          if (ExternalKeyCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExternalKeyCount);
          }
          if (InternalKeyCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InternalKeyCount);
          }
          if (ImportedKeyCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImportedKeyCount);
          }
          return size;
        }

        public void MergeFrom(Account other) {
          if (other == null) {
            return;
          }
          if (other.AccountNumber != 0) {
            AccountNumber = other.AccountNumber;
          }
          if (other.AccountName.Length != 0) {
            AccountName = other.AccountName;
          }
          if (other.TotalBalance != 0L) {
            TotalBalance = other.TotalBalance;
          }
          if (other.ExternalKeyCount != 0) {
            ExternalKeyCount = other.ExternalKeyCount;
          }
          if (other.InternalKeyCount != 0) {
            InternalKeyCount = other.InternalKeyCount;
          }
          if (other.ImportedKeyCount != 0) {
            ImportedKeyCount = other.ImportedKeyCount;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                AccountNumber = input.ReadUInt32();
                break;
              }
              case 18: {
                AccountName = input.ReadString();
                break;
              }
              case 24: {
                TotalBalance = input.ReadInt64();
                break;
              }
              case 32: {
                ExternalKeyCount = input.ReadUInt32();
                break;
              }
              case 40: {
                InternalKeyCount = input.ReadUInt32();
                break;
              }
              case 48: {
                ImportedKeyCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RenameAccountRequest : pb::IMessage<RenameAccountRequest> {
    private static readonly pb::MessageParser<RenameAccountRequest> _parser = new pb::MessageParser<RenameAccountRequest>(() => new RenameAccountRequest());
    public static pb::MessageParser<RenameAccountRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RenameAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RenameAccountRequest(RenameAccountRequest other) : this() {
      accountNumber_ = other.accountNumber_;
      newName_ = other.newName_;
    }

    public RenameAccountRequest Clone() {
      return new RenameAccountRequest(this);
    }

    public const int AccountNumberFieldNumber = 1;
    private uint accountNumber_;
    public uint AccountNumber {
      get { return accountNumber_; }
      set {
        accountNumber_ = value;
      }
    }

    public const int NewNameFieldNumber = 2;
    private string newName_ = "";
    public string NewName {
      get { return newName_; }
      set {
        newName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RenameAccountRequest);
    }

    public bool Equals(RenameAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountNumber != other.AccountNumber) return false;
      if (NewName != other.NewName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (AccountNumber != 0) hash ^= AccountNumber.GetHashCode();
      if (NewName.Length != 0) hash ^= NewName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountNumber != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountNumber);
      }
      if (NewName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NewName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (AccountNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountNumber);
      }
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewName);
      }
      return size;
    }

    public void MergeFrom(RenameAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountNumber != 0) {
        AccountNumber = other.AccountNumber;
      }
      if (other.NewName.Length != 0) {
        NewName = other.NewName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountNumber = input.ReadUInt32();
            break;
          }
          case 18: {
            NewName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RenameAccountResponse : pb::IMessage<RenameAccountResponse> {
    private static readonly pb::MessageParser<RenameAccountResponse> _parser = new pb::MessageParser<RenameAccountResponse>(() => new RenameAccountResponse());
    public static pb::MessageParser<RenameAccountResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RenameAccountResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RenameAccountResponse(RenameAccountResponse other) : this() {
    }

    public RenameAccountResponse Clone() {
      return new RenameAccountResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as RenameAccountResponse);
    }

    public bool Equals(RenameAccountResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(RenameAccountResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NextAccountRequest : pb::IMessage<NextAccountRequest> {
    private static readonly pb::MessageParser<NextAccountRequest> _parser = new pb::MessageParser<NextAccountRequest>(() => new NextAccountRequest());
    public static pb::MessageParser<NextAccountRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public NextAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public NextAccountRequest(NextAccountRequest other) : this() {
      passphrase_ = other.passphrase_;
      accountName_ = other.accountName_;
    }

    public NextAccountRequest Clone() {
      return new NextAccountRequest(this);
    }

    public const int PassphraseFieldNumber = 1;
    private pb::ByteString passphrase_ = pb::ByteString.Empty;
    public pb::ByteString Passphrase {
      get { return passphrase_; }
      set {
        passphrase_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int AccountNameFieldNumber = 2;
    private string accountName_ = "";
    public string AccountName {
      get { return accountName_; }
      set {
        accountName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as NextAccountRequest);
    }

    public bool Equals(NextAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Passphrase != other.Passphrase) return false;
      if (AccountName != other.AccountName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Passphrase.Length != 0) hash ^= Passphrase.GetHashCode();
      if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Passphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Passphrase);
      }
      if (AccountName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Passphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Passphrase);
      }
      if (AccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
      }
      return size;
    }

    public void MergeFrom(NextAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.Passphrase.Length != 0) {
        Passphrase = other.Passphrase;
      }
      if (other.AccountName.Length != 0) {
        AccountName = other.AccountName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Passphrase = input.ReadBytes();
            break;
          }
          case 18: {
            AccountName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NextAccountResponse : pb::IMessage<NextAccountResponse> {
    private static readonly pb::MessageParser<NextAccountResponse> _parser = new pb::MessageParser<NextAccountResponse>(() => new NextAccountResponse());
    public static pb::MessageParser<NextAccountResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public NextAccountResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public NextAccountResponse(NextAccountResponse other) : this() {
      accountNumber_ = other.accountNumber_;
    }

    public NextAccountResponse Clone() {
      return new NextAccountResponse(this);
    }

    public const int AccountNumberFieldNumber = 1;
    private uint accountNumber_;
    public uint AccountNumber {
      get { return accountNumber_; }
      set {
        accountNumber_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as NextAccountResponse);
    }

    public bool Equals(NextAccountResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountNumber != other.AccountNumber) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (AccountNumber != 0) hash ^= AccountNumber.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountNumber != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountNumber);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (AccountNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountNumber);
      }
      return size;
    }

    public void MergeFrom(NextAccountResponse other) {
      if (other == null) {
        return;
      }
      if (other.AccountNumber != 0) {
        AccountNumber = other.AccountNumber;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountNumber = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NextAddressRequest : pb::IMessage<NextAddressRequest> {
    private static readonly pb::MessageParser<NextAddressRequest> _parser = new pb::MessageParser<NextAddressRequest>(() => new NextAddressRequest());
    public static pb::MessageParser<NextAddressRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[15]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public NextAddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public NextAddressRequest(NextAddressRequest other) : this() {
      account_ = other.account_;
    }

    public NextAddressRequest Clone() {
      return new NextAddressRequest(this);
    }

    public const int AccountFieldNumber = 1;
    private uint account_;
    public uint Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as NextAddressRequest);
    }

    public bool Equals(NextAddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Account != 0) hash ^= Account.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Account);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
      }
      return size;
    }

    public void MergeFrom(NextAddressRequest other) {
      if (other == null) {
        return;
      }
      if (other.Account != 0) {
        Account = other.Account;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NextAddressResponse : pb::IMessage<NextAddressResponse> {
    private static readonly pb::MessageParser<NextAddressResponse> _parser = new pb::MessageParser<NextAddressResponse>(() => new NextAddressResponse());
    public static pb::MessageParser<NextAddressResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[16]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public NextAddressResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public NextAddressResponse(NextAddressResponse other) : this() {
      address_ = other.address_;
    }

    public NextAddressResponse Clone() {
      return new NextAddressResponse(this);
    }

    public const int AddressFieldNumber = 1;
    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as NextAddressResponse);
    }

    public bool Equals(NextAddressResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      return size;
    }

    public void MergeFrom(NextAddressResponse other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ImportPrivateKeyRequest : pb::IMessage<ImportPrivateKeyRequest> {
    private static readonly pb::MessageParser<ImportPrivateKeyRequest> _parser = new pb::MessageParser<ImportPrivateKeyRequest>(() => new ImportPrivateKeyRequest());
    public static pb::MessageParser<ImportPrivateKeyRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[17]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ImportPrivateKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ImportPrivateKeyRequest(ImportPrivateKeyRequest other) : this() {
      passphrase_ = other.passphrase_;
      account_ = other.account_;
      privateKeyWif_ = other.privateKeyWif_;
      rescan_ = other.rescan_;
    }

    public ImportPrivateKeyRequest Clone() {
      return new ImportPrivateKeyRequest(this);
    }

    public const int PassphraseFieldNumber = 1;
    private pb::ByteString passphrase_ = pb::ByteString.Empty;
    public pb::ByteString Passphrase {
      get { return passphrase_; }
      set {
        passphrase_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int AccountFieldNumber = 2;
    private uint account_;
    public uint Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    public const int PrivateKeyWifFieldNumber = 3;
    private string privateKeyWif_ = "";
    public string PrivateKeyWif {
      get { return privateKeyWif_; }
      set {
        privateKeyWif_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int RescanFieldNumber = 4;
    private bool rescan_;
    public bool Rescan {
      get { return rescan_; }
      set {
        rescan_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ImportPrivateKeyRequest);
    }

    public bool Equals(ImportPrivateKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Passphrase != other.Passphrase) return false;
      if (Account != other.Account) return false;
      if (PrivateKeyWif != other.PrivateKeyWif) return false;
      if (Rescan != other.Rescan) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Passphrase.Length != 0) hash ^= Passphrase.GetHashCode();
      if (Account != 0) hash ^= Account.GetHashCode();
      if (PrivateKeyWif.Length != 0) hash ^= PrivateKeyWif.GetHashCode();
      if (Rescan != false) hash ^= Rescan.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Passphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Passphrase);
      }
      if (Account != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Account);
      }
      if (PrivateKeyWif.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PrivateKeyWif);
      }
      if (Rescan != false) {
        output.WriteRawTag(32);
        output.WriteBool(Rescan);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Passphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Passphrase);
      }
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
      }
      if (PrivateKeyWif.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivateKeyWif);
      }
      if (Rescan != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(ImportPrivateKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.Passphrase.Length != 0) {
        Passphrase = other.Passphrase;
      }
      if (other.Account != 0) {
        Account = other.Account;
      }
      if (other.PrivateKeyWif.Length != 0) {
        PrivateKeyWif = other.PrivateKeyWif;
      }
      if (other.Rescan != false) {
        Rescan = other.Rescan;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Passphrase = input.ReadBytes();
            break;
          }
          case 16: {
            Account = input.ReadUInt32();
            break;
          }
          case 26: {
            PrivateKeyWif = input.ReadString();
            break;
          }
          case 32: {
            Rescan = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ImportPrivateKeyResponse : pb::IMessage<ImportPrivateKeyResponse> {
    private static readonly pb::MessageParser<ImportPrivateKeyResponse> _parser = new pb::MessageParser<ImportPrivateKeyResponse>(() => new ImportPrivateKeyResponse());
    public static pb::MessageParser<ImportPrivateKeyResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[18]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ImportPrivateKeyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ImportPrivateKeyResponse(ImportPrivateKeyResponse other) : this() {
    }

    public ImportPrivateKeyResponse Clone() {
      return new ImportPrivateKeyResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as ImportPrivateKeyResponse);
    }

    public bool Equals(ImportPrivateKeyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(ImportPrivateKeyResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BalanceRequest : pb::IMessage<BalanceRequest> {
    private static readonly pb::MessageParser<BalanceRequest> _parser = new pb::MessageParser<BalanceRequest>(() => new BalanceRequest());
    public static pb::MessageParser<BalanceRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[19]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BalanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BalanceRequest(BalanceRequest other) : this() {
      accountNumber_ = other.accountNumber_;
      requiredConfirmations_ = other.requiredConfirmations_;
    }

    public BalanceRequest Clone() {
      return new BalanceRequest(this);
    }

    public const int AccountNumberFieldNumber = 1;
    private uint accountNumber_;
    public uint AccountNumber {
      get { return accountNumber_; }
      set {
        accountNumber_ = value;
      }
    }

    public const int RequiredConfirmationsFieldNumber = 2;
    private int requiredConfirmations_;
    public int RequiredConfirmations {
      get { return requiredConfirmations_; }
      set {
        requiredConfirmations_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BalanceRequest);
    }

    public bool Equals(BalanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountNumber != other.AccountNumber) return false;
      if (RequiredConfirmations != other.RequiredConfirmations) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (AccountNumber != 0) hash ^= AccountNumber.GetHashCode();
      if (RequiredConfirmations != 0) hash ^= RequiredConfirmations.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountNumber != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountNumber);
      }
      if (RequiredConfirmations != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RequiredConfirmations);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (AccountNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountNumber);
      }
      if (RequiredConfirmations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequiredConfirmations);
      }
      return size;
    }

    public void MergeFrom(BalanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountNumber != 0) {
        AccountNumber = other.AccountNumber;
      }
      if (other.RequiredConfirmations != 0) {
        RequiredConfirmations = other.RequiredConfirmations;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountNumber = input.ReadUInt32();
            break;
          }
          case 16: {
            RequiredConfirmations = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BalanceResponse : pb::IMessage<BalanceResponse> {
    private static readonly pb::MessageParser<BalanceResponse> _parser = new pb::MessageParser<BalanceResponse>(() => new BalanceResponse());
    public static pb::MessageParser<BalanceResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[20]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BalanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BalanceResponse(BalanceResponse other) : this() {
      total_ = other.total_;
      spendable_ = other.spendable_;
      immatureReward_ = other.immatureReward_;
    }

    public BalanceResponse Clone() {
      return new BalanceResponse(this);
    }

    public const int TotalFieldNumber = 1;
    private long total_;
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    public const int SpendableFieldNumber = 2;
    private long spendable_;
    public long Spendable {
      get { return spendable_; }
      set {
        spendable_ = value;
      }
    }

    public const int ImmatureRewardFieldNumber = 3;
    private long immatureReward_;
    public long ImmatureReward {
      get { return immatureReward_; }
      set {
        immatureReward_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BalanceResponse);
    }

    public bool Equals(BalanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Total != other.Total) return false;
      if (Spendable != other.Spendable) return false;
      if (ImmatureReward != other.ImmatureReward) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Total != 0L) hash ^= Total.GetHashCode();
      if (Spendable != 0L) hash ^= Spendable.GetHashCode();
      if (ImmatureReward != 0L) hash ^= ImmatureReward.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Total != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Total);
      }
      if (Spendable != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Spendable);
      }
      if (ImmatureReward != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ImmatureReward);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      if (Spendable != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Spendable);
      }
      if (ImmatureReward != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ImmatureReward);
      }
      return size;
    }

    public void MergeFrom(BalanceResponse other) {
      if (other == null) {
        return;
      }
      if (other.Total != 0L) {
        Total = other.Total;
      }
      if (other.Spendable != 0L) {
        Spendable = other.Spendable;
      }
      if (other.ImmatureReward != 0L) {
        ImmatureReward = other.ImmatureReward;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Total = input.ReadInt64();
            break;
          }
          case 16: {
            Spendable = input.ReadInt64();
            break;
          }
          case 24: {
            ImmatureReward = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetTransactionsRequest : pb::IMessage<GetTransactionsRequest> {
    private static readonly pb::MessageParser<GetTransactionsRequest> _parser = new pb::MessageParser<GetTransactionsRequest>(() => new GetTransactionsRequest());
    public static pb::MessageParser<GetTransactionsRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[21]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetTransactionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetTransactionsRequest(GetTransactionsRequest other) : this() {
      startingBlockHash_ = other.startingBlockHash_;
      startingBlockHeight_ = other.startingBlockHeight_;
      endingBlockHash_ = other.endingBlockHash_;
      endingBlockHeight_ = other.endingBlockHeight_;
      minimumRecentTransactions_ = other.minimumRecentTransactions_;
    }

    public GetTransactionsRequest Clone() {
      return new GetTransactionsRequest(this);
    }

    public const int StartingBlockHashFieldNumber = 1;
    private pb::ByteString startingBlockHash_ = pb::ByteString.Empty;
    public pb::ByteString StartingBlockHash {
      get { return startingBlockHash_; }
      set {
        startingBlockHash_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int StartingBlockHeightFieldNumber = 2;
    private int startingBlockHeight_;
    public int StartingBlockHeight {
      get { return startingBlockHeight_; }
      set {
        startingBlockHeight_ = value;
      }
    }

    public const int EndingBlockHashFieldNumber = 3;
    private pb::ByteString endingBlockHash_ = pb::ByteString.Empty;
    public pb::ByteString EndingBlockHash {
      get { return endingBlockHash_; }
      set {
        endingBlockHash_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int EndingBlockHeightFieldNumber = 4;
    private int endingBlockHeight_;
    public int EndingBlockHeight {
      get { return endingBlockHeight_; }
      set {
        endingBlockHeight_ = value;
      }
    }

    public const int MinimumRecentTransactionsFieldNumber = 5;
    private int minimumRecentTransactions_;
    public int MinimumRecentTransactions {
      get { return minimumRecentTransactions_; }
      set {
        minimumRecentTransactions_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetTransactionsRequest);
    }

    public bool Equals(GetTransactionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartingBlockHash != other.StartingBlockHash) return false;
      if (StartingBlockHeight != other.StartingBlockHeight) return false;
      if (EndingBlockHash != other.EndingBlockHash) return false;
      if (EndingBlockHeight != other.EndingBlockHeight) return false;
      if (MinimumRecentTransactions != other.MinimumRecentTransactions) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (StartingBlockHash.Length != 0) hash ^= StartingBlockHash.GetHashCode();
      if (StartingBlockHeight != 0) hash ^= StartingBlockHeight.GetHashCode();
      if (EndingBlockHash.Length != 0) hash ^= EndingBlockHash.GetHashCode();
      if (EndingBlockHeight != 0) hash ^= EndingBlockHeight.GetHashCode();
      if (MinimumRecentTransactions != 0) hash ^= MinimumRecentTransactions.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (StartingBlockHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(StartingBlockHash);
      }
      if (StartingBlockHeight != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(StartingBlockHeight);
      }
      if (EndingBlockHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EndingBlockHash);
      }
      if (EndingBlockHeight != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndingBlockHeight);
      }
      if (MinimumRecentTransactions != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MinimumRecentTransactions);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (StartingBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StartingBlockHash);
      }
      if (StartingBlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(StartingBlockHeight);
      }
      if (EndingBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EndingBlockHash);
      }
      if (EndingBlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndingBlockHeight);
      }
      if (MinimumRecentTransactions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinimumRecentTransactions);
      }
      return size;
    }

    public void MergeFrom(GetTransactionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.StartingBlockHash.Length != 0) {
        StartingBlockHash = other.StartingBlockHash;
      }
      if (other.StartingBlockHeight != 0) {
        StartingBlockHeight = other.StartingBlockHeight;
      }
      if (other.EndingBlockHash.Length != 0) {
        EndingBlockHash = other.EndingBlockHash;
      }
      if (other.EndingBlockHeight != 0) {
        EndingBlockHeight = other.EndingBlockHeight;
      }
      if (other.MinimumRecentTransactions != 0) {
        MinimumRecentTransactions = other.MinimumRecentTransactions;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StartingBlockHash = input.ReadBytes();
            break;
          }
          case 16: {
            StartingBlockHeight = input.ReadSInt32();
            break;
          }
          case 26: {
            EndingBlockHash = input.ReadBytes();
            break;
          }
          case 32: {
            EndingBlockHeight = input.ReadInt32();
            break;
          }
          case 40: {
            MinimumRecentTransactions = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetTransactionsResponse : pb::IMessage<GetTransactionsResponse> {
    private static readonly pb::MessageParser<GetTransactionsResponse> _parser = new pb::MessageParser<GetTransactionsResponse>(() => new GetTransactionsResponse());
    public static pb::MessageParser<GetTransactionsResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[22]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetTransactionsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetTransactionsResponse(GetTransactionsResponse other) : this() {
      minedTransactions_ = other.minedTransactions_.Clone();
      unminedTransactions_ = other.unminedTransactions_.Clone();
    }

    public GetTransactionsResponse Clone() {
      return new GetTransactionsResponse(this);
    }

    public const int MinedTransactionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Walletrpc.BlockDetails> _repeated_minedTransactions_codec
        = pb::FieldCodec.ForMessage(10, global::Walletrpc.BlockDetails.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.BlockDetails> minedTransactions_ = new pbc::RepeatedField<global::Walletrpc.BlockDetails>();
    public pbc::RepeatedField<global::Walletrpc.BlockDetails> MinedTransactions {
      get { return minedTransactions_; }
    }

    public const int UnminedTransactionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Walletrpc.TransactionDetails> _repeated_unminedTransactions_codec
        = pb::FieldCodec.ForMessage(18, global::Walletrpc.TransactionDetails.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.TransactionDetails> unminedTransactions_ = new pbc::RepeatedField<global::Walletrpc.TransactionDetails>();
    public pbc::RepeatedField<global::Walletrpc.TransactionDetails> UnminedTransactions {
      get { return unminedTransactions_; }
    }

    public override bool Equals(object other) {
      return Equals(other as GetTransactionsResponse);
    }

    public bool Equals(GetTransactionsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!minedTransactions_.Equals(other.minedTransactions_)) return false;
      if(!unminedTransactions_.Equals(other.unminedTransactions_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= minedTransactions_.GetHashCode();
      hash ^= unminedTransactions_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      minedTransactions_.WriteTo(output, _repeated_minedTransactions_codec);
      unminedTransactions_.WriteTo(output, _repeated_unminedTransactions_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += minedTransactions_.CalculateSize(_repeated_minedTransactions_codec);
      size += unminedTransactions_.CalculateSize(_repeated_unminedTransactions_codec);
      return size;
    }

    public void MergeFrom(GetTransactionsResponse other) {
      if (other == null) {
        return;
      }
      minedTransactions_.Add(other.minedTransactions_);
      unminedTransactions_.Add(other.unminedTransactions_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            minedTransactions_.AddEntriesFrom(input, _repeated_minedTransactions_codec);
            break;
          }
          case 18: {
            unminedTransactions_.AddEntriesFrom(input, _repeated_unminedTransactions_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ChangePassphraseRequest : pb::IMessage<ChangePassphraseRequest> {
    private static readonly pb::MessageParser<ChangePassphraseRequest> _parser = new pb::MessageParser<ChangePassphraseRequest>(() => new ChangePassphraseRequest());
    public static pb::MessageParser<ChangePassphraseRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[23]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ChangePassphraseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ChangePassphraseRequest(ChangePassphraseRequest other) : this() {
      key_ = other.key_;
      oldPassphrase_ = other.oldPassphrase_;
      newPassphrase_ = other.newPassphrase_;
    }

    public ChangePassphraseRequest Clone() {
      return new ChangePassphraseRequest(this);
    }

    public const int KeyFieldNumber = 1;
    private global::Walletrpc.ChangePassphraseRequest.Types.Key key_ = global::Walletrpc.ChangePassphraseRequest.Types.Key.PRIVATE;
    public global::Walletrpc.ChangePassphraseRequest.Types.Key Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public const int OldPassphraseFieldNumber = 2;
    private pb::ByteString oldPassphrase_ = pb::ByteString.Empty;
    public pb::ByteString OldPassphrase {
      get { return oldPassphrase_; }
      set {
        oldPassphrase_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int NewPassphraseFieldNumber = 3;
    private pb::ByteString newPassphrase_ = pb::ByteString.Empty;
    public pb::ByteString NewPassphrase {
      get { return newPassphrase_; }
      set {
        newPassphrase_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ChangePassphraseRequest);
    }

    public bool Equals(ChangePassphraseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (OldPassphrase != other.OldPassphrase) return false;
      if (NewPassphrase != other.NewPassphrase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Key != global::Walletrpc.ChangePassphraseRequest.Types.Key.PRIVATE) hash ^= Key.GetHashCode();
      if (OldPassphrase.Length != 0) hash ^= OldPassphrase.GetHashCode();
      if (NewPassphrase.Length != 0) hash ^= NewPassphrase.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != global::Walletrpc.ChangePassphraseRequest.Types.Key.PRIVATE) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Key);
      }
      if (OldPassphrase.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(OldPassphrase);
      }
      if (NewPassphrase.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(NewPassphrase);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Key != global::Walletrpc.ChangePassphraseRequest.Types.Key.PRIVATE) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Key);
      }
      if (OldPassphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OldPassphrase);
      }
      if (NewPassphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewPassphrase);
      }
      return size;
    }

    public void MergeFrom(ChangePassphraseRequest other) {
      if (other == null) {
        return;
      }
      if (other.Key != global::Walletrpc.ChangePassphraseRequest.Types.Key.PRIVATE) {
        Key = other.Key;
      }
      if (other.OldPassphrase.Length != 0) {
        OldPassphrase = other.OldPassphrase;
      }
      if (other.NewPassphrase.Length != 0) {
        NewPassphrase = other.NewPassphrase;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            key_ = (global::Walletrpc.ChangePassphraseRequest.Types.Key) input.ReadEnum();
            break;
          }
          case 18: {
            OldPassphrase = input.ReadBytes();
            break;
          }
          case 26: {
            NewPassphrase = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Key {
        PRIVATE = 0,
        PUBLIC = 1,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ChangePassphraseResponse : pb::IMessage<ChangePassphraseResponse> {
    private static readonly pb::MessageParser<ChangePassphraseResponse> _parser = new pb::MessageParser<ChangePassphraseResponse>(() => new ChangePassphraseResponse());
    public static pb::MessageParser<ChangePassphraseResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[24]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ChangePassphraseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ChangePassphraseResponse(ChangePassphraseResponse other) : this() {
    }

    public ChangePassphraseResponse Clone() {
      return new ChangePassphraseResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as ChangePassphraseResponse);
    }

    public bool Equals(ChangePassphraseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(ChangePassphraseResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FundTransactionRequest : pb::IMessage<FundTransactionRequest> {
    private static readonly pb::MessageParser<FundTransactionRequest> _parser = new pb::MessageParser<FundTransactionRequest>(() => new FundTransactionRequest());
    public static pb::MessageParser<FundTransactionRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[25]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FundTransactionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FundTransactionRequest(FundTransactionRequest other) : this() {
      account_ = other.account_;
      targetAmount_ = other.targetAmount_;
      requiredConfirmations_ = other.requiredConfirmations_;
      includeImmatureCoinbases_ = other.includeImmatureCoinbases_;
      includeChangeScript_ = other.includeChangeScript_;
    }

    public FundTransactionRequest Clone() {
      return new FundTransactionRequest(this);
    }

    public const int AccountFieldNumber = 1;
    private uint account_;
    public uint Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    public const int TargetAmountFieldNumber = 2;
    private long targetAmount_;
    public long TargetAmount {
      get { return targetAmount_; }
      set {
        targetAmount_ = value;
      }
    }

    public const int RequiredConfirmationsFieldNumber = 3;
    private int requiredConfirmations_;
    public int RequiredConfirmations {
      get { return requiredConfirmations_; }
      set {
        requiredConfirmations_ = value;
      }
    }

    public const int IncludeImmatureCoinbasesFieldNumber = 4;
    private bool includeImmatureCoinbases_;
    public bool IncludeImmatureCoinbases {
      get { return includeImmatureCoinbases_; }
      set {
        includeImmatureCoinbases_ = value;
      }
    }

    public const int IncludeChangeScriptFieldNumber = 5;
    private bool includeChangeScript_;
    public bool IncludeChangeScript {
      get { return includeChangeScript_; }
      set {
        includeChangeScript_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FundTransactionRequest);
    }

    public bool Equals(FundTransactionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (TargetAmount != other.TargetAmount) return false;
      if (RequiredConfirmations != other.RequiredConfirmations) return false;
      if (IncludeImmatureCoinbases != other.IncludeImmatureCoinbases) return false;
      if (IncludeChangeScript != other.IncludeChangeScript) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Account != 0) hash ^= Account.GetHashCode();
      if (TargetAmount != 0L) hash ^= TargetAmount.GetHashCode();
      if (RequiredConfirmations != 0) hash ^= RequiredConfirmations.GetHashCode();
      if (IncludeImmatureCoinbases != false) hash ^= IncludeImmatureCoinbases.GetHashCode();
      if (IncludeChangeScript != false) hash ^= IncludeChangeScript.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Account);
      }
      if (TargetAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TargetAmount);
      }
      if (RequiredConfirmations != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RequiredConfirmations);
      }
      if (IncludeImmatureCoinbases != false) {
        output.WriteRawTag(32);
        output.WriteBool(IncludeImmatureCoinbases);
      }
      if (IncludeChangeScript != false) {
        output.WriteRawTag(40);
        output.WriteBool(IncludeChangeScript);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
      }
      if (TargetAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetAmount);
      }
      if (RequiredConfirmations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequiredConfirmations);
      }
      if (IncludeImmatureCoinbases != false) {
        size += 1 + 1;
      }
      if (IncludeChangeScript != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(FundTransactionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Account != 0) {
        Account = other.Account;
      }
      if (other.TargetAmount != 0L) {
        TargetAmount = other.TargetAmount;
      }
      if (other.RequiredConfirmations != 0) {
        RequiredConfirmations = other.RequiredConfirmations;
      }
      if (other.IncludeImmatureCoinbases != false) {
        IncludeImmatureCoinbases = other.IncludeImmatureCoinbases;
      }
      if (other.IncludeChangeScript != false) {
        IncludeChangeScript = other.IncludeChangeScript;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadUInt32();
            break;
          }
          case 16: {
            TargetAmount = input.ReadInt64();
            break;
          }
          case 24: {
            RequiredConfirmations = input.ReadInt32();
            break;
          }
          case 32: {
            IncludeImmatureCoinbases = input.ReadBool();
            break;
          }
          case 40: {
            IncludeChangeScript = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FundTransactionResponse : pb::IMessage<FundTransactionResponse> {
    private static readonly pb::MessageParser<FundTransactionResponse> _parser = new pb::MessageParser<FundTransactionResponse>(() => new FundTransactionResponse());
    public static pb::MessageParser<FundTransactionResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[26]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FundTransactionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FundTransactionResponse(FundTransactionResponse other) : this() {
      selectedOutputs_ = other.selectedOutputs_.Clone();
      totalAmount_ = other.totalAmount_;
      changePkScript_ = other.changePkScript_;
    }

    public FundTransactionResponse Clone() {
      return new FundTransactionResponse(this);
    }

    public const int SelectedOutputsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Walletrpc.FundTransactionResponse.Types.PreviousOutput> _repeated_selectedOutputs_codec
        = pb::FieldCodec.ForMessage(10, global::Walletrpc.FundTransactionResponse.Types.PreviousOutput.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.FundTransactionResponse.Types.PreviousOutput> selectedOutputs_ = new pbc::RepeatedField<global::Walletrpc.FundTransactionResponse.Types.PreviousOutput>();
    public pbc::RepeatedField<global::Walletrpc.FundTransactionResponse.Types.PreviousOutput> SelectedOutputs {
      get { return selectedOutputs_; }
    }

    public const int TotalAmountFieldNumber = 2;
    private long totalAmount_;
    public long TotalAmount {
      get { return totalAmount_; }
      set {
        totalAmount_ = value;
      }
    }

    public const int ChangePkScriptFieldNumber = 3;
    private pb::ByteString changePkScript_ = pb::ByteString.Empty;
    public pb::ByteString ChangePkScript {
      get { return changePkScript_; }
      set {
        changePkScript_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FundTransactionResponse);
    }

    public bool Equals(FundTransactionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!selectedOutputs_.Equals(other.selectedOutputs_)) return false;
      if (TotalAmount != other.TotalAmount) return false;
      if (ChangePkScript != other.ChangePkScript) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= selectedOutputs_.GetHashCode();
      if (TotalAmount != 0L) hash ^= TotalAmount.GetHashCode();
      if (ChangePkScript.Length != 0) hash ^= ChangePkScript.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      selectedOutputs_.WriteTo(output, _repeated_selectedOutputs_codec);
      if (TotalAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalAmount);
      }
      if (ChangePkScript.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ChangePkScript);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += selectedOutputs_.CalculateSize(_repeated_selectedOutputs_codec);
      if (TotalAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalAmount);
      }
      if (ChangePkScript.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChangePkScript);
      }
      return size;
    }

    public void MergeFrom(FundTransactionResponse other) {
      if (other == null) {
        return;
      }
      selectedOutputs_.Add(other.selectedOutputs_);
      if (other.TotalAmount != 0L) {
        TotalAmount = other.TotalAmount;
      }
      if (other.ChangePkScript.Length != 0) {
        ChangePkScript = other.ChangePkScript;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            selectedOutputs_.AddEntriesFrom(input, _repeated_selectedOutputs_codec);
            break;
          }
          case 16: {
            TotalAmount = input.ReadInt64();
            break;
          }
          case 26: {
            ChangePkScript = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class PreviousOutput : pb::IMessage<PreviousOutput> {
        private static readonly pb::MessageParser<PreviousOutput> _parser = new pb::MessageParser<PreviousOutput>(() => new PreviousOutput());
        public static pb::MessageParser<PreviousOutput> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Walletrpc.FundTransactionResponse.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public PreviousOutput() {
          OnConstruction();
        }

        partial void OnConstruction();

        public PreviousOutput(PreviousOutput other) : this() {
          transactionHash_ = other.transactionHash_;
          outputIndex_ = other.outputIndex_;
          amount_ = other.amount_;
          pkScript_ = other.pkScript_;
          receiveTime_ = other.receiveTime_;
          fromCoinbase_ = other.fromCoinbase_;
        }

        public PreviousOutput Clone() {
          return new PreviousOutput(this);
        }

        public const int TransactionHashFieldNumber = 1;
        private pb::ByteString transactionHash_ = pb::ByteString.Empty;
        public pb::ByteString TransactionHash {
          get { return transactionHash_; }
          set {
            transactionHash_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public const int OutputIndexFieldNumber = 2;
        private uint outputIndex_;
        public uint OutputIndex {
          get { return outputIndex_; }
          set {
            outputIndex_ = value;
          }
        }

        public const int AmountFieldNumber = 3;
        private long amount_;
        public long Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public const int PkScriptFieldNumber = 4;
        private pb::ByteString pkScript_ = pb::ByteString.Empty;
        public pb::ByteString PkScript {
          get { return pkScript_; }
          set {
            pkScript_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public const int ReceiveTimeFieldNumber = 5;
        private long receiveTime_;
        public long ReceiveTime {
          get { return receiveTime_; }
          set {
            receiveTime_ = value;
          }
        }

        public const int FromCoinbaseFieldNumber = 6;
        private bool fromCoinbase_;
        public bool FromCoinbase {
          get { return fromCoinbase_; }
          set {
            fromCoinbase_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as PreviousOutput);
        }

        public bool Equals(PreviousOutput other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TransactionHash != other.TransactionHash) return false;
          if (OutputIndex != other.OutputIndex) return false;
          if (Amount != other.Amount) return false;
          if (PkScript != other.PkScript) return false;
          if (ReceiveTime != other.ReceiveTime) return false;
          if (FromCoinbase != other.FromCoinbase) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (TransactionHash.Length != 0) hash ^= TransactionHash.GetHashCode();
          if (OutputIndex != 0) hash ^= OutputIndex.GetHashCode();
          if (Amount != 0L) hash ^= Amount.GetHashCode();
          if (PkScript.Length != 0) hash ^= PkScript.GetHashCode();
          if (ReceiveTime != 0L) hash ^= ReceiveTime.GetHashCode();
          if (FromCoinbase != false) hash ^= FromCoinbase.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (TransactionHash.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(TransactionHash);
          }
          if (OutputIndex != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(OutputIndex);
          }
          if (Amount != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Amount);
          }
          if (PkScript.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(PkScript);
          }
          if (ReceiveTime != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(ReceiveTime);
          }
          if (FromCoinbase != false) {
            output.WriteRawTag(48);
            output.WriteBool(FromCoinbase);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (TransactionHash.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionHash);
          }
          if (OutputIndex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OutputIndex);
          }
          if (Amount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
          }
          if (PkScript.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(PkScript);
          }
          if (ReceiveTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiveTime);
          }
          if (FromCoinbase != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(PreviousOutput other) {
          if (other == null) {
            return;
          }
          if (other.TransactionHash.Length != 0) {
            TransactionHash = other.TransactionHash;
          }
          if (other.OutputIndex != 0) {
            OutputIndex = other.OutputIndex;
          }
          if (other.Amount != 0L) {
            Amount = other.Amount;
          }
          if (other.PkScript.Length != 0) {
            PkScript = other.PkScript;
          }
          if (other.ReceiveTime != 0L) {
            ReceiveTime = other.ReceiveTime;
          }
          if (other.FromCoinbase != false) {
            FromCoinbase = other.FromCoinbase;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                TransactionHash = input.ReadBytes();
                break;
              }
              case 16: {
                OutputIndex = input.ReadUInt32();
                break;
              }
              case 24: {
                Amount = input.ReadInt64();
                break;
              }
              case 34: {
                PkScript = input.ReadBytes();
                break;
              }
              case 40: {
                ReceiveTime = input.ReadInt64();
                break;
              }
              case 48: {
                FromCoinbase = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SignTransactionRequest : pb::IMessage<SignTransactionRequest> {
    private static readonly pb::MessageParser<SignTransactionRequest> _parser = new pb::MessageParser<SignTransactionRequest>(() => new SignTransactionRequest());
    public static pb::MessageParser<SignTransactionRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[27]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SignTransactionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SignTransactionRequest(SignTransactionRequest other) : this() {
      passphrase_ = other.passphrase_;
      serializedTransaction_ = other.serializedTransaction_;
      inputIndexes_ = other.inputIndexes_.Clone();
    }

    public SignTransactionRequest Clone() {
      return new SignTransactionRequest(this);
    }

    public const int PassphraseFieldNumber = 1;
    private pb::ByteString passphrase_ = pb::ByteString.Empty;
    public pb::ByteString Passphrase {
      get { return passphrase_; }
      set {
        passphrase_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int SerializedTransactionFieldNumber = 2;
    private pb::ByteString serializedTransaction_ = pb::ByteString.Empty;
    public pb::ByteString SerializedTransaction {
      get { return serializedTransaction_; }
      set {
        serializedTransaction_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int InputIndexesFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_inputIndexes_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> inputIndexes_ = new pbc::RepeatedField<uint>();
    public pbc::RepeatedField<uint> InputIndexes {
      get { return inputIndexes_; }
    }

    public override bool Equals(object other) {
      return Equals(other as SignTransactionRequest);
    }

    public bool Equals(SignTransactionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Passphrase != other.Passphrase) return false;
      if (SerializedTransaction != other.SerializedTransaction) return false;
      if(!inputIndexes_.Equals(other.inputIndexes_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Passphrase.Length != 0) hash ^= Passphrase.GetHashCode();
      if (SerializedTransaction.Length != 0) hash ^= SerializedTransaction.GetHashCode();
      hash ^= inputIndexes_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Passphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Passphrase);
      }
      if (SerializedTransaction.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SerializedTransaction);
      }
      inputIndexes_.WriteTo(output, _repeated_inputIndexes_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Passphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Passphrase);
      }
      if (SerializedTransaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SerializedTransaction);
      }
      size += inputIndexes_.CalculateSize(_repeated_inputIndexes_codec);
      return size;
    }

    public void MergeFrom(SignTransactionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Passphrase.Length != 0) {
        Passphrase = other.Passphrase;
      }
      if (other.SerializedTransaction.Length != 0) {
        SerializedTransaction = other.SerializedTransaction;
      }
      inputIndexes_.Add(other.inputIndexes_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Passphrase = input.ReadBytes();
            break;
          }
          case 18: {
            SerializedTransaction = input.ReadBytes();
            break;
          }
          case 26:
          case 24: {
            inputIndexes_.AddEntriesFrom(input, _repeated_inputIndexes_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SignTransactionResponse : pb::IMessage<SignTransactionResponse> {
    private static readonly pb::MessageParser<SignTransactionResponse> _parser = new pb::MessageParser<SignTransactionResponse>(() => new SignTransactionResponse());
    public static pb::MessageParser<SignTransactionResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[28]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SignTransactionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SignTransactionResponse(SignTransactionResponse other) : this() {
      transaction_ = other.transaction_;
      unsignedInputIndexes_ = other.unsignedInputIndexes_.Clone();
    }

    public SignTransactionResponse Clone() {
      return new SignTransactionResponse(this);
    }

    public const int TransactionFieldNumber = 1;
    private pb::ByteString transaction_ = pb::ByteString.Empty;
    public pb::ByteString Transaction {
      get { return transaction_; }
      set {
        transaction_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int UnsignedInputIndexesFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_unsignedInputIndexes_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> unsignedInputIndexes_ = new pbc::RepeatedField<uint>();
    public pbc::RepeatedField<uint> UnsignedInputIndexes {
      get { return unsignedInputIndexes_; }
    }

    public override bool Equals(object other) {
      return Equals(other as SignTransactionResponse);
    }

    public bool Equals(SignTransactionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Transaction != other.Transaction) return false;
      if(!unsignedInputIndexes_.Equals(other.unsignedInputIndexes_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Transaction.Length != 0) hash ^= Transaction.GetHashCode();
      hash ^= unsignedInputIndexes_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Transaction.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Transaction);
      }
      unsignedInputIndexes_.WriteTo(output, _repeated_unsignedInputIndexes_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Transaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Transaction);
      }
      size += unsignedInputIndexes_.CalculateSize(_repeated_unsignedInputIndexes_codec);
      return size;
    }

    public void MergeFrom(SignTransactionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Transaction.Length != 0) {
        Transaction = other.Transaction;
      }
      unsignedInputIndexes_.Add(other.unsignedInputIndexes_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Transaction = input.ReadBytes();
            break;
          }
          case 18:
          case 16: {
            unsignedInputIndexes_.AddEntriesFrom(input, _repeated_unsignedInputIndexes_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PublishTransactionRequest : pb::IMessage<PublishTransactionRequest> {
    private static readonly pb::MessageParser<PublishTransactionRequest> _parser = new pb::MessageParser<PublishTransactionRequest>(() => new PublishTransactionRequest());
    public static pb::MessageParser<PublishTransactionRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[29]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PublishTransactionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PublishTransactionRequest(PublishTransactionRequest other) : this() {
      signedTransaction_ = other.signedTransaction_;
    }

    public PublishTransactionRequest Clone() {
      return new PublishTransactionRequest(this);
    }

    public const int SignedTransactionFieldNumber = 1;
    private pb::ByteString signedTransaction_ = pb::ByteString.Empty;
    public pb::ByteString SignedTransaction {
      get { return signedTransaction_; }
      set {
        signedTransaction_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PublishTransactionRequest);
    }

    public bool Equals(PublishTransactionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SignedTransaction != other.SignedTransaction) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (SignedTransaction.Length != 0) hash ^= SignedTransaction.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SignedTransaction.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SignedTransaction);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SignedTransaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SignedTransaction);
      }
      return size;
    }

    public void MergeFrom(PublishTransactionRequest other) {
      if (other == null) {
        return;
      }
      if (other.SignedTransaction.Length != 0) {
        SignedTransaction = other.SignedTransaction;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SignedTransaction = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PublishTransactionResponse : pb::IMessage<PublishTransactionResponse> {
    private static readonly pb::MessageParser<PublishTransactionResponse> _parser = new pb::MessageParser<PublishTransactionResponse>(() => new PublishTransactionResponse());
    public static pb::MessageParser<PublishTransactionResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[30]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PublishTransactionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PublishTransactionResponse(PublishTransactionResponse other) : this() {
    }

    public PublishTransactionResponse Clone() {
      return new PublishTransactionResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as PublishTransactionResponse);
    }

    public bool Equals(PublishTransactionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(PublishTransactionResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TransactionNotificationsRequest : pb::IMessage<TransactionNotificationsRequest> {
    private static readonly pb::MessageParser<TransactionNotificationsRequest> _parser = new pb::MessageParser<TransactionNotificationsRequest>(() => new TransactionNotificationsRequest());
    public static pb::MessageParser<TransactionNotificationsRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[31]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TransactionNotificationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TransactionNotificationsRequest(TransactionNotificationsRequest other) : this() {
    }

    public TransactionNotificationsRequest Clone() {
      return new TransactionNotificationsRequest(this);
    }

    public override bool Equals(object other) {
      return Equals(other as TransactionNotificationsRequest);
    }

    public bool Equals(TransactionNotificationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(TransactionNotificationsRequest other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TransactionNotificationsResponse : pb::IMessage<TransactionNotificationsResponse> {
    private static readonly pb::MessageParser<TransactionNotificationsResponse> _parser = new pb::MessageParser<TransactionNotificationsResponse>(() => new TransactionNotificationsResponse());
    public static pb::MessageParser<TransactionNotificationsResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[32]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TransactionNotificationsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TransactionNotificationsResponse(TransactionNotificationsResponse other) : this() {
      attachedBlocks_ = other.attachedBlocks_.Clone();
      detachedBlocks_ = other.detachedBlocks_.Clone();
      unminedTransactions_ = other.unminedTransactions_.Clone();
      unminedTransactionHashes_ = other.unminedTransactionHashes_.Clone();
    }

    public TransactionNotificationsResponse Clone() {
      return new TransactionNotificationsResponse(this);
    }

    public const int AttachedBlocksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Walletrpc.BlockDetails> _repeated_attachedBlocks_codec
        = pb::FieldCodec.ForMessage(10, global::Walletrpc.BlockDetails.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.BlockDetails> attachedBlocks_ = new pbc::RepeatedField<global::Walletrpc.BlockDetails>();
    public pbc::RepeatedField<global::Walletrpc.BlockDetails> AttachedBlocks {
      get { return attachedBlocks_; }
    }

    public const int DetachedBlocksFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_detachedBlocks_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> detachedBlocks_ = new pbc::RepeatedField<pb::ByteString>();
    public pbc::RepeatedField<pb::ByteString> DetachedBlocks {
      get { return detachedBlocks_; }
    }

    public const int UnminedTransactionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Walletrpc.TransactionDetails> _repeated_unminedTransactions_codec
        = pb::FieldCodec.ForMessage(26, global::Walletrpc.TransactionDetails.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.TransactionDetails> unminedTransactions_ = new pbc::RepeatedField<global::Walletrpc.TransactionDetails>();
    public pbc::RepeatedField<global::Walletrpc.TransactionDetails> UnminedTransactions {
      get { return unminedTransactions_; }
    }

    public const int UnminedTransactionHashesFieldNumber = 4;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_unminedTransactionHashes_codec
        = pb::FieldCodec.ForBytes(34);
    private readonly pbc::RepeatedField<pb::ByteString> unminedTransactionHashes_ = new pbc::RepeatedField<pb::ByteString>();
    public pbc::RepeatedField<pb::ByteString> UnminedTransactionHashes {
      get { return unminedTransactionHashes_; }
    }

    public override bool Equals(object other) {
      return Equals(other as TransactionNotificationsResponse);
    }

    public bool Equals(TransactionNotificationsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attachedBlocks_.Equals(other.attachedBlocks_)) return false;
      if(!detachedBlocks_.Equals(other.detachedBlocks_)) return false;
      if(!unminedTransactions_.Equals(other.unminedTransactions_)) return false;
      if(!unminedTransactionHashes_.Equals(other.unminedTransactionHashes_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= attachedBlocks_.GetHashCode();
      hash ^= detachedBlocks_.GetHashCode();
      hash ^= unminedTransactions_.GetHashCode();
      hash ^= unminedTransactionHashes_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      attachedBlocks_.WriteTo(output, _repeated_attachedBlocks_codec);
      detachedBlocks_.WriteTo(output, _repeated_detachedBlocks_codec);
      unminedTransactions_.WriteTo(output, _repeated_unminedTransactions_codec);
      unminedTransactionHashes_.WriteTo(output, _repeated_unminedTransactionHashes_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += attachedBlocks_.CalculateSize(_repeated_attachedBlocks_codec);
      size += detachedBlocks_.CalculateSize(_repeated_detachedBlocks_codec);
      size += unminedTransactions_.CalculateSize(_repeated_unminedTransactions_codec);
      size += unminedTransactionHashes_.CalculateSize(_repeated_unminedTransactionHashes_codec);
      return size;
    }

    public void MergeFrom(TransactionNotificationsResponse other) {
      if (other == null) {
        return;
      }
      attachedBlocks_.Add(other.attachedBlocks_);
      detachedBlocks_.Add(other.detachedBlocks_);
      unminedTransactions_.Add(other.unminedTransactions_);
      unminedTransactionHashes_.Add(other.unminedTransactionHashes_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            attachedBlocks_.AddEntriesFrom(input, _repeated_attachedBlocks_codec);
            break;
          }
          case 18: {
            detachedBlocks_.AddEntriesFrom(input, _repeated_detachedBlocks_codec);
            break;
          }
          case 26: {
            unminedTransactions_.AddEntriesFrom(input, _repeated_unminedTransactions_codec);
            break;
          }
          case 34: {
            unminedTransactionHashes_.AddEntriesFrom(input, _repeated_unminedTransactionHashes_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SpentnessNotificationsRequest : pb::IMessage<SpentnessNotificationsRequest> {
    private static readonly pb::MessageParser<SpentnessNotificationsRequest> _parser = new pb::MessageParser<SpentnessNotificationsRequest>(() => new SpentnessNotificationsRequest());
    public static pb::MessageParser<SpentnessNotificationsRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[33]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SpentnessNotificationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SpentnessNotificationsRequest(SpentnessNotificationsRequest other) : this() {
      account_ = other.account_;
      noNotifyUnspent_ = other.noNotifyUnspent_;
      noNotifySpent_ = other.noNotifySpent_;
    }

    public SpentnessNotificationsRequest Clone() {
      return new SpentnessNotificationsRequest(this);
    }

    public const int AccountFieldNumber = 1;
    private uint account_;
    public uint Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    public const int NoNotifyUnspentFieldNumber = 2;
    private bool noNotifyUnspent_;
    public bool NoNotifyUnspent {
      get { return noNotifyUnspent_; }
      set {
        noNotifyUnspent_ = value;
      }
    }

    public const int NoNotifySpentFieldNumber = 3;
    private bool noNotifySpent_;
    public bool NoNotifySpent {
      get { return noNotifySpent_; }
      set {
        noNotifySpent_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SpentnessNotificationsRequest);
    }

    public bool Equals(SpentnessNotificationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (NoNotifyUnspent != other.NoNotifyUnspent) return false;
      if (NoNotifySpent != other.NoNotifySpent) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Account != 0) hash ^= Account.GetHashCode();
      if (NoNotifyUnspent != false) hash ^= NoNotifyUnspent.GetHashCode();
      if (NoNotifySpent != false) hash ^= NoNotifySpent.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Account);
      }
      if (NoNotifyUnspent != false) {
        output.WriteRawTag(16);
        output.WriteBool(NoNotifyUnspent);
      }
      if (NoNotifySpent != false) {
        output.WriteRawTag(24);
        output.WriteBool(NoNotifySpent);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
      }
      if (NoNotifyUnspent != false) {
        size += 1 + 1;
      }
      if (NoNotifySpent != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(SpentnessNotificationsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Account != 0) {
        Account = other.Account;
      }
      if (other.NoNotifyUnspent != false) {
        NoNotifyUnspent = other.NoNotifyUnspent;
      }
      if (other.NoNotifySpent != false) {
        NoNotifySpent = other.NoNotifySpent;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadUInt32();
            break;
          }
          case 16: {
            NoNotifyUnspent = input.ReadBool();
            break;
          }
          case 24: {
            NoNotifySpent = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SpentnessNotificationsResponse : pb::IMessage<SpentnessNotificationsResponse> {
    private static readonly pb::MessageParser<SpentnessNotificationsResponse> _parser = new pb::MessageParser<SpentnessNotificationsResponse>(() => new SpentnessNotificationsResponse());
    public static pb::MessageParser<SpentnessNotificationsResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[34]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SpentnessNotificationsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SpentnessNotificationsResponse(SpentnessNotificationsResponse other) : this() {
      transactionHash_ = other.transactionHash_;
      outputIndex_ = other.outputIndex_;
      Spender = other.spender_ != null ? other.Spender.Clone() : null;
    }

    public SpentnessNotificationsResponse Clone() {
      return new SpentnessNotificationsResponse(this);
    }

    public const int TransactionHashFieldNumber = 1;
    private pb::ByteString transactionHash_ = pb::ByteString.Empty;
    public pb::ByteString TransactionHash {
      get { return transactionHash_; }
      set {
        transactionHash_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int OutputIndexFieldNumber = 2;
    private uint outputIndex_;
    public uint OutputIndex {
      get { return outputIndex_; }
      set {
        outputIndex_ = value;
      }
    }

    public const int SpenderFieldNumber = 3;
    private global::Walletrpc.SpentnessNotificationsResponse.Types.Spender spender_;
    public global::Walletrpc.SpentnessNotificationsResponse.Types.Spender Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SpentnessNotificationsResponse);
    }

    public bool Equals(SpentnessNotificationsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionHash != other.TransactionHash) return false;
      if (OutputIndex != other.OutputIndex) return false;
      if (!object.Equals(Spender, other.Spender)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (TransactionHash.Length != 0) hash ^= TransactionHash.GetHashCode();
      if (OutputIndex != 0) hash ^= OutputIndex.GetHashCode();
      if (spender_ != null) hash ^= Spender.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TransactionHash);
      }
      if (OutputIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OutputIndex);
      }
      if (spender_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Spender);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (TransactionHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionHash);
      }
      if (OutputIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OutputIndex);
      }
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      return size;
    }

    public void MergeFrom(SpentnessNotificationsResponse other) {
      if (other == null) {
        return;
      }
      if (other.TransactionHash.Length != 0) {
        TransactionHash = other.TransactionHash;
      }
      if (other.OutputIndex != 0) {
        OutputIndex = other.OutputIndex;
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          spender_ = new global::Walletrpc.SpentnessNotificationsResponse.Types.Spender();
        }
        Spender.MergeFrom(other.Spender);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TransactionHash = input.ReadBytes();
            break;
          }
          case 16: {
            OutputIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            if (spender_ == null) {
              spender_ = new global::Walletrpc.SpentnessNotificationsResponse.Types.Spender();
            }
            input.ReadMessage(spender_);
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Spender : pb::IMessage<Spender> {
        private static readonly pb::MessageParser<Spender> _parser = new pb::MessageParser<Spender>(() => new Spender());
        public static pb::MessageParser<Spender> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Walletrpc.SpentnessNotificationsResponse.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public Spender() {
          OnConstruction();
        }

        partial void OnConstruction();

        public Spender(Spender other) : this() {
          transactionHash_ = other.transactionHash_;
          inputIndex_ = other.inputIndex_;
        }

        public Spender Clone() {
          return new Spender(this);
        }

        public const int TransactionHashFieldNumber = 1;
        private pb::ByteString transactionHash_ = pb::ByteString.Empty;
        public pb::ByteString TransactionHash {
          get { return transactionHash_; }
          set {
            transactionHash_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public const int InputIndexFieldNumber = 2;
        private uint inputIndex_;
        public uint InputIndex {
          get { return inputIndex_; }
          set {
            inputIndex_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as Spender);
        }

        public bool Equals(Spender other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TransactionHash != other.TransactionHash) return false;
          if (InputIndex != other.InputIndex) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (TransactionHash.Length != 0) hash ^= TransactionHash.GetHashCode();
          if (InputIndex != 0) hash ^= InputIndex.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (TransactionHash.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(TransactionHash);
          }
          if (InputIndex != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(InputIndex);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (TransactionHash.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionHash);
          }
          if (InputIndex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputIndex);
          }
          return size;
        }

        public void MergeFrom(Spender other) {
          if (other == null) {
            return;
          }
          if (other.TransactionHash.Length != 0) {
            TransactionHash = other.TransactionHash;
          }
          if (other.InputIndex != 0) {
            InputIndex = other.InputIndex;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                TransactionHash = input.ReadBytes();
                break;
              }
              case 16: {
                InputIndex = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AccountNotificationsRequest : pb::IMessage<AccountNotificationsRequest> {
    private static readonly pb::MessageParser<AccountNotificationsRequest> _parser = new pb::MessageParser<AccountNotificationsRequest>(() => new AccountNotificationsRequest());
    public static pb::MessageParser<AccountNotificationsRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[35]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AccountNotificationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AccountNotificationsRequest(AccountNotificationsRequest other) : this() {
    }

    public AccountNotificationsRequest Clone() {
      return new AccountNotificationsRequest(this);
    }

    public override bool Equals(object other) {
      return Equals(other as AccountNotificationsRequest);
    }

    public bool Equals(AccountNotificationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(AccountNotificationsRequest other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AccountNotificationsResponse : pb::IMessage<AccountNotificationsResponse> {
    private static readonly pb::MessageParser<AccountNotificationsResponse> _parser = new pb::MessageParser<AccountNotificationsResponse>(() => new AccountNotificationsResponse());
    public static pb::MessageParser<AccountNotificationsResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[36]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AccountNotificationsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AccountNotificationsResponse(AccountNotificationsResponse other) : this() {
      accountNumber_ = other.accountNumber_;
      accountName_ = other.accountName_;
      externalKeyCount_ = other.externalKeyCount_;
      internalKeyCount_ = other.internalKeyCount_;
      importedKeyCount_ = other.importedKeyCount_;
    }

    public AccountNotificationsResponse Clone() {
      return new AccountNotificationsResponse(this);
    }

    public const int AccountNumberFieldNumber = 1;
    private uint accountNumber_;
    public uint AccountNumber {
      get { return accountNumber_; }
      set {
        accountNumber_ = value;
      }
    }

    public const int AccountNameFieldNumber = 2;
    private string accountName_ = "";
    public string AccountName {
      get { return accountName_; }
      set {
        accountName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ExternalKeyCountFieldNumber = 3;
    private uint externalKeyCount_;
    public uint ExternalKeyCount {
      get { return externalKeyCount_; }
      set {
        externalKeyCount_ = value;
      }
    }

    public const int InternalKeyCountFieldNumber = 4;
    private uint internalKeyCount_;
    public uint InternalKeyCount {
      get { return internalKeyCount_; }
      set {
        internalKeyCount_ = value;
      }
    }

    public const int ImportedKeyCountFieldNumber = 5;
    private uint importedKeyCount_;
    public uint ImportedKeyCount {
      get { return importedKeyCount_; }
      set {
        importedKeyCount_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AccountNotificationsResponse);
    }

    public bool Equals(AccountNotificationsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountNumber != other.AccountNumber) return false;
      if (AccountName != other.AccountName) return false;
      if (ExternalKeyCount != other.ExternalKeyCount) return false;
      if (InternalKeyCount != other.InternalKeyCount) return false;
      if (ImportedKeyCount != other.ImportedKeyCount) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (AccountNumber != 0) hash ^= AccountNumber.GetHashCode();
      if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
      if (ExternalKeyCount != 0) hash ^= ExternalKeyCount.GetHashCode();
      if (InternalKeyCount != 0) hash ^= InternalKeyCount.GetHashCode();
      if (ImportedKeyCount != 0) hash ^= ImportedKeyCount.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountNumber != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountNumber);
      }
      if (AccountName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountName);
      }
      if (ExternalKeyCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ExternalKeyCount);
      }
      if (InternalKeyCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(InternalKeyCount);
      }
      if (ImportedKeyCount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ImportedKeyCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (AccountNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountNumber);
      }
      if (AccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
      }
      if (ExternalKeyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExternalKeyCount);
      }
      if (InternalKeyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InternalKeyCount);
      }
      if (ImportedKeyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImportedKeyCount);
      }
      return size;
    }

    public void MergeFrom(AccountNotificationsResponse other) {
      if (other == null) {
        return;
      }
      if (other.AccountNumber != 0) {
        AccountNumber = other.AccountNumber;
      }
      if (other.AccountName.Length != 0) {
        AccountName = other.AccountName;
      }
      if (other.ExternalKeyCount != 0) {
        ExternalKeyCount = other.ExternalKeyCount;
      }
      if (other.InternalKeyCount != 0) {
        InternalKeyCount = other.InternalKeyCount;
      }
      if (other.ImportedKeyCount != 0) {
        ImportedKeyCount = other.ImportedKeyCount;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountNumber = input.ReadUInt32();
            break;
          }
          case 18: {
            AccountName = input.ReadString();
            break;
          }
          case 24: {
            ExternalKeyCount = input.ReadUInt32();
            break;
          }
          case 32: {
            InternalKeyCount = input.ReadUInt32();
            break;
          }
          case 40: {
            ImportedKeyCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CreateWalletRequest : pb::IMessage<CreateWalletRequest> {
    private static readonly pb::MessageParser<CreateWalletRequest> _parser = new pb::MessageParser<CreateWalletRequest>(() => new CreateWalletRequest());
    public static pb::MessageParser<CreateWalletRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[37]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CreateWalletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CreateWalletRequest(CreateWalletRequest other) : this() {
      publicPassphrase_ = other.publicPassphrase_;
      privatePassphrase_ = other.privatePassphrase_;
      seed_ = other.seed_;
    }

    public CreateWalletRequest Clone() {
      return new CreateWalletRequest(this);
    }

    public const int PublicPassphraseFieldNumber = 1;
    private pb::ByteString publicPassphrase_ = pb::ByteString.Empty;
    public pb::ByteString PublicPassphrase {
      get { return publicPassphrase_; }
      set {
        publicPassphrase_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int PrivatePassphraseFieldNumber = 2;
    private pb::ByteString privatePassphrase_ = pb::ByteString.Empty;
    public pb::ByteString PrivatePassphrase {
      get { return privatePassphrase_; }
      set {
        privatePassphrase_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int SeedFieldNumber = 3;
    private pb::ByteString seed_ = pb::ByteString.Empty;
    public pb::ByteString Seed {
      get { return seed_; }
      set {
        seed_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CreateWalletRequest);
    }

    public bool Equals(CreateWalletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicPassphrase != other.PublicPassphrase) return false;
      if (PrivatePassphrase != other.PrivatePassphrase) return false;
      if (Seed != other.Seed) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PublicPassphrase.Length != 0) hash ^= PublicPassphrase.GetHashCode();
      if (PrivatePassphrase.Length != 0) hash ^= PrivatePassphrase.GetHashCode();
      if (Seed.Length != 0) hash ^= Seed.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicPassphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PublicPassphrase);
      }
      if (PrivatePassphrase.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PrivatePassphrase);
      }
      if (Seed.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Seed);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PublicPassphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicPassphrase);
      }
      if (PrivatePassphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrivatePassphrase);
      }
      if (Seed.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Seed);
      }
      return size;
    }

    public void MergeFrom(CreateWalletRequest other) {
      if (other == null) {
        return;
      }
      if (other.PublicPassphrase.Length != 0) {
        PublicPassphrase = other.PublicPassphrase;
      }
      if (other.PrivatePassphrase.Length != 0) {
        PrivatePassphrase = other.PrivatePassphrase;
      }
      if (other.Seed.Length != 0) {
        Seed = other.Seed;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PublicPassphrase = input.ReadBytes();
            break;
          }
          case 18: {
            PrivatePassphrase = input.ReadBytes();
            break;
          }
          case 26: {
            Seed = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CreateWalletResponse : pb::IMessage<CreateWalletResponse> {
    private static readonly pb::MessageParser<CreateWalletResponse> _parser = new pb::MessageParser<CreateWalletResponse>(() => new CreateWalletResponse());
    public static pb::MessageParser<CreateWalletResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[38]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CreateWalletResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CreateWalletResponse(CreateWalletResponse other) : this() {
    }

    public CreateWalletResponse Clone() {
      return new CreateWalletResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as CreateWalletResponse);
    }

    public bool Equals(CreateWalletResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(CreateWalletResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class OpenWalletRequest : pb::IMessage<OpenWalletRequest> {
    private static readonly pb::MessageParser<OpenWalletRequest> _parser = new pb::MessageParser<OpenWalletRequest>(() => new OpenWalletRequest());
    public static pb::MessageParser<OpenWalletRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[39]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public OpenWalletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public OpenWalletRequest(OpenWalletRequest other) : this() {
      publicPassphrase_ = other.publicPassphrase_;
    }

    public OpenWalletRequest Clone() {
      return new OpenWalletRequest(this);
    }

    public const int PublicPassphraseFieldNumber = 1;
    private pb::ByteString publicPassphrase_ = pb::ByteString.Empty;
    public pb::ByteString PublicPassphrase {
      get { return publicPassphrase_; }
      set {
        publicPassphrase_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as OpenWalletRequest);
    }

    public bool Equals(OpenWalletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicPassphrase != other.PublicPassphrase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PublicPassphrase.Length != 0) hash ^= PublicPassphrase.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicPassphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PublicPassphrase);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PublicPassphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicPassphrase);
      }
      return size;
    }

    public void MergeFrom(OpenWalletRequest other) {
      if (other == null) {
        return;
      }
      if (other.PublicPassphrase.Length != 0) {
        PublicPassphrase = other.PublicPassphrase;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PublicPassphrase = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class OpenWalletResponse : pb::IMessage<OpenWalletResponse> {
    private static readonly pb::MessageParser<OpenWalletResponse> _parser = new pb::MessageParser<OpenWalletResponse>(() => new OpenWalletResponse());
    public static pb::MessageParser<OpenWalletResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[40]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public OpenWalletResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public OpenWalletResponse(OpenWalletResponse other) : this() {
    }

    public OpenWalletResponse Clone() {
      return new OpenWalletResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as OpenWalletResponse);
    }

    public bool Equals(OpenWalletResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(OpenWalletResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CloseWalletRequest : pb::IMessage<CloseWalletRequest> {
    private static readonly pb::MessageParser<CloseWalletRequest> _parser = new pb::MessageParser<CloseWalletRequest>(() => new CloseWalletRequest());
    public static pb::MessageParser<CloseWalletRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[41]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CloseWalletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CloseWalletRequest(CloseWalletRequest other) : this() {
    }

    public CloseWalletRequest Clone() {
      return new CloseWalletRequest(this);
    }

    public override bool Equals(object other) {
      return Equals(other as CloseWalletRequest);
    }

    public bool Equals(CloseWalletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(CloseWalletRequest other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CloseWalletResponse : pb::IMessage<CloseWalletResponse> {
    private static readonly pb::MessageParser<CloseWalletResponse> _parser = new pb::MessageParser<CloseWalletResponse>(() => new CloseWalletResponse());
    public static pb::MessageParser<CloseWalletResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[42]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CloseWalletResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CloseWalletResponse(CloseWalletResponse other) : this() {
    }

    public CloseWalletResponse Clone() {
      return new CloseWalletResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as CloseWalletResponse);
    }

    public bool Equals(CloseWalletResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(CloseWalletResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class WalletExistsRequest : pb::IMessage<WalletExistsRequest> {
    private static readonly pb::MessageParser<WalletExistsRequest> _parser = new pb::MessageParser<WalletExistsRequest>(() => new WalletExistsRequest());
    public static pb::MessageParser<WalletExistsRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[43]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public WalletExistsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public WalletExistsRequest(WalletExistsRequest other) : this() {
    }

    public WalletExistsRequest Clone() {
      return new WalletExistsRequest(this);
    }

    public override bool Equals(object other) {
      return Equals(other as WalletExistsRequest);
    }

    public bool Equals(WalletExistsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(WalletExistsRequest other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class WalletExistsResponse : pb::IMessage<WalletExistsResponse> {
    private static readonly pb::MessageParser<WalletExistsResponse> _parser = new pb::MessageParser<WalletExistsResponse>(() => new WalletExistsResponse());
    public static pb::MessageParser<WalletExistsResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[44]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public WalletExistsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public WalletExistsResponse(WalletExistsResponse other) : this() {
      exists_ = other.exists_;
    }

    public WalletExistsResponse Clone() {
      return new WalletExistsResponse(this);
    }

    public const int ExistsFieldNumber = 1;
    private bool exists_;
    public bool Exists {
      get { return exists_; }
      set {
        exists_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as WalletExistsResponse);
    }

    public bool Equals(WalletExistsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Exists != other.Exists) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Exists != false) hash ^= Exists.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Exists != false) {
        output.WriteRawTag(8);
        output.WriteBool(Exists);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Exists != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(WalletExistsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Exists != false) {
        Exists = other.Exists;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Exists = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StartBtcdRpcRequest : pb::IMessage<StartBtcdRpcRequest> {
    private static readonly pb::MessageParser<StartBtcdRpcRequest> _parser = new pb::MessageParser<StartBtcdRpcRequest>(() => new StartBtcdRpcRequest());
    public static pb::MessageParser<StartBtcdRpcRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[45]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public StartBtcdRpcRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public StartBtcdRpcRequest(StartBtcdRpcRequest other) : this() {
      networkAddress_ = other.networkAddress_;
      username_ = other.username_;
      password_ = other.password_;
      certificate_ = other.certificate_;
    }

    public StartBtcdRpcRequest Clone() {
      return new StartBtcdRpcRequest(this);
    }

    public const int NetworkAddressFieldNumber = 1;
    private string networkAddress_ = "";
    public string NetworkAddress {
      get { return networkAddress_; }
      set {
        networkAddress_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    public string Username {
      get { return username_; }
      set {
        username_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int PasswordFieldNumber = 3;
    private pb::ByteString password_ = pb::ByteString.Empty;
    public pb::ByteString Password {
      get { return password_; }
      set {
        password_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int CertificateFieldNumber = 4;
    private pb::ByteString certificate_ = pb::ByteString.Empty;
    public pb::ByteString Certificate {
      get { return certificate_; }
      set {
        certificate_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as StartBtcdRpcRequest);
    }

    public bool Equals(StartBtcdRpcRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetworkAddress != other.NetworkAddress) return false;
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      if (Certificate != other.Certificate) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (NetworkAddress.Length != 0) hash ^= NetworkAddress.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Certificate.Length != 0) hash ^= Certificate.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NetworkAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NetworkAddress);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Password);
      }
      if (Certificate.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Certificate);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (NetworkAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkAddress);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Password);
      }
      if (Certificate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Certificate);
      }
      return size;
    }

    public void MergeFrom(StartBtcdRpcRequest other) {
      if (other == null) {
        return;
      }
      if (other.NetworkAddress.Length != 0) {
        NetworkAddress = other.NetworkAddress;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Certificate.Length != 0) {
        Certificate = other.Certificate;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NetworkAddress = input.ReadString();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadBytes();
            break;
          }
          case 34: {
            Certificate = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StartBtcdRpcResponse : pb::IMessage<StartBtcdRpcResponse> {
    private static readonly pb::MessageParser<StartBtcdRpcResponse> _parser = new pb::MessageParser<StartBtcdRpcResponse>(() => new StartBtcdRpcResponse());
    public static pb::MessageParser<StartBtcdRpcResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.Api.Descriptor.MessageTypes[46]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public StartBtcdRpcResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public StartBtcdRpcResponse(StartBtcdRpcResponse other) : this() {
    }

    public StartBtcdRpcResponse Clone() {
      return new StartBtcdRpcResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as StartBtcdRpcResponse);
    }

    public bool Equals(StartBtcdRpcResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(StartBtcdRpcResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
